export const bashTemplate = `#!/bin/bash
# cert-ctrl installation script
# Generated by: {{BASE_URL}}
# Platform: {{PLATFORM}}-{{ARCHITECTURE}}
# Mirror: {{MIRROR_NAME}}
# Country: {{COUNTRY}}

set -euo pipefail

# Configuration from service
PLATFORM="{{PLATFORM}}"
ARCHITECTURE="{{ARCHITECTURE}}"
MIRROR_URL="{{MIRROR_URL}}"
BASE_URL="{{BASE_URL}}"
VERSION="{{VERSION}}"
USER_INSTALL={{USER_INSTALL}}
VERBOSE={{VERBOSE}}
FORCE={{FORCE}}
DRY_RUN={{DRY_RUN}}

# Override with environment or parameters
INSTALL_DIR="\${INSTALL_DIR:-{{INSTALL_DIR}}}"
if [ -z "$INSTALL_DIR" ]; then
    if [ "$USER_INSTALL" = "true" ]; then
        INSTALL_DIR="$HOME/.local/bin"
    else
        INSTALL_DIR="/usr/local/bin"
    fi
fi

# Colors
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m'

# Logging functions
log_info() { echo -e "\${BLUE}[INFO]\${NC} $1"; }
log_success() { echo -e "\${GREEN}[SUCCESS]\${NC} $1"; }
log_warning() { echo -e "\${YELLOW}[WARNING]\${NC} $1"; }
log_error() { echo -e "\${RED}[ERROR]\${NC} $1" >&2; }
log_verbose() { [ "$VERBOSE" = "true" ] && echo -e "\${BLUE}[VERBOSE]\${NC} $1"; }

# Detect platform if not provided
detect_platform() {
    if [ -n "$PLATFORM" ] && [ "$PLATFORM" != "unknown" ]; then
        echo "$PLATFORM-$ARCHITECTURE"
        return
    fi
    
    local platform=""
    local arch=""
    
    case "$(uname -s)" in
        Linux*)     platform="linux" ;;
        Darwin*)    platform="macos" ;;
        *)          log_error "Unsupported platform: $(uname -s)"; exit 1 ;;
    esac
    
    case "$(uname -m)" in
        x86_64|amd64)   arch="x64" ;;
        aarch64|arm64)  arch="arm64" ;;
        armv7l)         arch="arm" ;;
        *)              arch="x64" ;; # Default
    esac
    
    echo "\${platform}-\${arch}"
}

# Check dependencies
check_dependencies() {
    local deps=("curl" "tar")
    
    for dep in "\${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log_error "Required dependency '$dep' is not installed."
            exit 1
        fi
    done
    
    log_verbose "All dependencies are available"
}

# Resolve version
resolve_version() {
    if [ "$VERSION" = "latest" ]; then
        log_info "Resolving latest version..."
        local latest_url="$BASE_URL/api/version/latest"
        
        if command -v jq &> /dev/null; then
            VERSION=$(curl -fsSL "$latest_url" | jq -r '.version')
        else
            VERSION=$(curl -fsSL "$latest_url" | grep '"version":' | sed -E 's/.*"version": "([^"]+)".*/\\1/')
        fi
        
        if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            log_error "Failed to resolve latest version"
            exit 1
        fi
        
        log_verbose "Resolved latest version: $VERSION"
    fi
}

# Download binary
download_binary() {
    local platform_arch="$1"
    
    # Use proxy if available, otherwise direct GitHub
    local download_url
    if [ "$MIRROR_URL" = "$BASE_URL/releases/proxy" ]; then
        download_url="$MIRROR_URL/$VERSION/cert-ctrl-$platform_arch.tar.gz"
    else
        download_url="$MIRROR_URL/{{GITHUB_REPO_OWNER}}/{{GITHUB_REPO_NAME}}/releases/download/$VERSION/cert-ctrl-$platform_arch.tar.gz"
    fi
    
    local temp_file=$(mktemp)
    
    log_info "Downloading cert-ctrl $VERSION for $platform_arch..."
    log_verbose "Download URL: $download_url"
    
    if ! curl -fsSL "$download_url" -o "$temp_file"; then
        log_error "Failed to download cert-ctrl"
        rm -f "$temp_file"
        exit 1
    fi
    
    echo "$temp_file"
}

# Install binary
install_binary() {
    local temp_file="$1"
    local platform_arch="$2"
    
    if [ "$DRY_RUN" = "true" ]; then
        log_info "DRY RUN: Would install to $INSTALL_DIR"
        return 0
    fi
    
    mkdir -p "$INSTALL_DIR"
    
    log_info "Installing to $INSTALL_DIR..."
    
    # Extract
    local extract_dir=$(mktemp -d)
    if ! tar -xzf "$temp_file" -C "$extract_dir"; then
        log_error "Failed to extract downloaded file"
        rm -rf "$extract_dir"
        exit 1
    fi
    
    # Find binary
    local binary_path=""
    if [ -f "$extract_dir/cert-ctrl" ]; then
        binary_path="$extract_dir/cert-ctrl"
    elif [ -f "$extract_dir/bin/cert-ctrl" ]; then
        binary_path="$extract_dir/bin/cert-ctrl"
    else
        log_error "cert-ctrl binary not found in archive"
        rm -rf "$extract_dir"
        exit 1
    fi
    
    # Check existing installation
    if [ -f "$INSTALL_DIR/cert-ctrl" ] && [ "$FORCE" = "false" ]; then
        log_warning "cert-ctrl already exists at $INSTALL_DIR/cert-ctrl"
        read -p "Overwrite? [y/N]: " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Installation cancelled"
            rm -rf "$extract_dir"
            exit 0
        fi
    fi
    
    # Install
    chmod +x "$binary_path"
    cp "$binary_path" "$INSTALL_DIR/cert-ctrl"
    
    rm -rf "$extract_dir"
    
    log_success "cert-ctrl installed successfully!"
}

# Setup PATH
setup_path() {
    if [ "$USER_INSTALL" = "true" ]; then
        local shell_rc=""
        
        case "$SHELL" in
            */bash)  shell_rc="$HOME/.bashrc" ;;
            */zsh)   shell_rc="$HOME/.zshrc" ;;
            */fish)  shell_rc="$HOME/.config/fish/config.fish" ;;
            *)       shell_rc="$HOME/.profile" ;;
        esac
        
        if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
            log_info "Adding $INSTALL_DIR to PATH"
            
            if [[ "$shell_rc" == *"fish"* ]]; then
                echo "set -gx PATH $INSTALL_DIR \\$PATH" >> "$shell_rc"
            else
                echo "export PATH=\\"$INSTALL_DIR:\\$PATH\\"" >> "$shell_rc"
            fi
            
            log_warning "Please restart your shell or run: source $shell_rc"
        fi
    fi
}

# Verify installation
verify_installation() {
    local binary_path="$INSTALL_DIR/cert-ctrl"
    
    if [ ! -f "$binary_path" ]; then
        log_error "Installation failed: binary not found"
        exit 1
    fi
    
    if "$binary_path" --version &>/dev/null; then
        local version=$("$binary_path" --version 2>/dev/null | head -n1)
        log_success "Installation verified! Version: $version"
    else
        log_warning "Binary installed but version check failed"
    fi
}

# Main function
main() {
    log_info "Starting cert-ctrl installation..."
    log_verbose "Service URL: $BASE_URL"
    log_verbose "Mirror: $MIRROR_URL"
    
    check_dependencies
    
    local platform_arch=$(detect_platform)
    log_verbose "Platform: $platform_arch"
    
    resolve_version
    
    if [ "$USER_INSTALL" = "false" ] && [ ! -w "$(dirname "$INSTALL_DIR")" ] && [ "$EUID" -ne 0 ]; then
        log_error "Installation requires root privileges or use --user-install"
        exit 1
    fi
    
    local temp_file=$(download_binary "$platform_arch")
    
    install_binary "$temp_file" "$platform_arch"
    
    rm -f "$temp_file"
    
    setup_path
    verify_installation
    
    echo
    log_success "cert-ctrl installation completed!"
    echo
    echo "Next steps:"
    if [ "$USER_INSTALL" = "true" ] && [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
        echo "  1. Restart your shell or source your shell config"
        echo "  2. Run: cert-ctrl --help"
    else
        echo "  1. Run: cert-ctrl --help"
    fi
    echo
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --user-install|--user)
            USER_INSTALL=true
            shift
            ;;
        --version)
            VERSION="$2"
            shift 2
            ;;
        --install-dir|--dir)
            INSTALL_DIR="$2"
            shift 2
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --help|-h)
            echo "cert-ctrl installation script"
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  --user-install    Install to user directory"
            echo "  --version VER     Install specific version"
            echo "  --install-dir DIR Custom install directory"
            echo "  --force           Overwrite existing installation"
            echo "  --verbose         Enable verbose output"
            echo "  --dry-run         Show what would be done"
            echo "  --help            Show this help"
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Run installation
main
`;

export { bashTemplate };