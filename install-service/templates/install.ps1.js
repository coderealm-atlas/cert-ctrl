export const powershellTemplate = `# cert-ctrl installation script (PowerShell)
# Generated by: {{BASE_URL}}
# Mirror: {{MIRROR_NAME}}
# Version: {{VERSION}}
# Platform: windows-{{ARCHITECTURE}}

param(
    [switch]$UserInstall,
    [string]$Version = "{{VERSION}}",
    [string]$InstallDir,
    [switch]$Verbose,
    [switch]$Force,
    [switch]$DryRun
)

$ErrorActionPreference = 'Stop'
Set-StrictMode -Version Latest

function Get-SystemArchitecture {
    try {
        $runtimeType = [System.Runtime.InteropServices.RuntimeInformation]
        $property = $runtimeType.GetProperty('OSArchitecture')
        if ($property) {
            $value = $property.GetValue($null)
            if ($value) {
                return $value.ToString()
            }
        }
    }
    catch {
        # Ignore and try alternate mechanisms
    }

    try {
        $os = Get-CimInstance Win32_OperatingSystem -ErrorAction Stop
        if ($os.OSArchitecture) {
            return $os.OSArchitecture
        }
    }
    catch {
        try {
            $os = Get-WmiObject Win32_OperatingSystem -ErrorAction Stop
            if ($os.OSArchitecture) {
                return $os.OSArchitecture
            }
        }
        catch {
            # Fall through
        }
    }

    if ([Environment]::Is64BitOperatingSystem) {
        return 'x64'
    }

    return 'x86'
}

function Write-Info($Message) {
    Write-Host "[INFO] $Message"
}

function Write-Success($Message) {
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-WarningMessage($Message) {
    Write-Warning $Message
}

function Write-ErrorMessage($Message) {
    Write-Error $Message
}

function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

$serviceName = "CertCtrlAgent"
$serviceDisplayName = "Cert Ctrl Agent"
$serviceDescription = "Maintains device certificates and polls the cert-ctrl control plane."
$serviceArgs = "--keep-running"

function Register-CertCtrlService {
    param(
        [string]$BinaryPath,
        [bool]$IsUserInstall,
        [bool]$ForceInstall
    )

    if ($IsUserInstall) {
        Write-Info "User install selected; skipping Windows service registration."
        return $false
    }

    if (-not (Test-Administrator)) {
        Write-WarningMessage "Administrator privileges are required to register the Windows service. Skipping."
        return $false
    }

    $imagePath = '"' + $BinaryPath + '" ' + $serviceArgs

    try {
        $existing = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
        if ($existing) {
            if (-not $ForceInstall) {
                Write-Info "Windows service '$serviceName' already exists. Use -Force to recreate it."
                if ($existing.Status -ne 'Running') {
                    Start-Service -Name $serviceName -ErrorAction SilentlyContinue
                }
                return $true
            }

            if ($existing.Status -eq 'Running') {
                Stop-Service -Name $serviceName -Force -ErrorAction SilentlyContinue
            }
            sc.exe delete $serviceName | Out-Null
            Start-Sleep -Seconds 2
            while (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {
                Start-Sleep -Milliseconds 200
            }
        }

        New-Service -Name $serviceName -BinaryPathName $imagePath -DisplayName $serviceDisplayName -Description $serviceDescription -StartupType Automatic -ErrorAction Stop
        Start-Service -Name $serviceName -ErrorAction SilentlyContinue
        Write-Success "Windows service '$serviceName' registered."
        return $true
    }
    catch {
        Write-WarningMessage "Failed to configure Windows service '$serviceName': $($_.Exception.Message)"
        return $false
    }
}

$archSlug = "{{ARCHITECTURE}}"
if ([string]::IsNullOrWhiteSpace($archSlug)) {
    $archSlug = "x64"
}

$systemArchitecture = Get-SystemArchitecture
switch -regex ($systemArchitecture) {
    'arm64|aarch64' { $archSlug = 'arm64'; break }
    'arm' { $archSlug = 'arm'; break }
    'x86|x64|amd64|86|64' { $archSlug = 'x64'; break }
    default { $archSlug = 'x64' }
}

$paramUserInstall = $false
if ($PSBoundParameters.ContainsKey('UserInstall') -and $UserInstall.IsPresent) {
    $paramUserInstall = $true
}

$paramForceInstall = ([bool]$Force) -or ("{{FORCE}}" -eq "true")


$installPath = if ($InstallDir) {
    $InstallDir
} else {
    if ($paramUserInstall) {
        Join-Path $env:LOCALAPPDATA "Programs\\cert-ctrl"
    } else {
        "C:\\Program Files\\cert-ctrl"
    }
}

if ($paramUserInstall -and -not (Test-Administrator)) {
    Write-Info "User-mode installation selected; administrator rights are not required."
}

$mirrorUrl = "{{MIRROR_URL}}"
if ($mirrorUrl -eq "{{BASE_URL}}/releases/proxy") {
    $packageUrl = "$mirrorUrl/$Version/cert-ctrl-windows-$archSlug.zip"
} else {
    $packageUrl = "$mirrorUrl/{{GITHUB_REPO_OWNER}}/{{GITHUB_REPO_NAME}}/releases/download/$Version/cert-ctrl-windows-$archSlug.zip"
}

$tempDir = New-Item -ItemType Directory -Path ([System.IO.Path]::GetTempPath()) -Name ("cert-ctrl-" + [System.Guid]::NewGuid().ToString())
$zipPath = Join-Path $tempDir "cert-ctrl.zip"

Write-Info "Downloading cert-ctrl $Version..."
Invoke-WebRequest -Uri $packageUrl -OutFile $zipPath -UseBasicParsing

if ($DryRun -or ("{{DRY_RUN}}" -eq "true")) {
    Write-Info "DRY RUN: Installation files prepared at $tempDir"
    exit 0
}

Expand-Archive -Path $zipPath -DestinationPath $tempDir -Force

New-Item -ItemType Directory -Force -Path $installPath | Out-Null

$binaryPath = Join-Path $tempDir 'cert-ctrl.exe'
if (-not (Test-Path $binaryPath)) {
    $binaryPath = Join-Path $tempDir 'bin\\cert-ctrl.exe'
}

if (-not (Test-Path $binaryPath)) {
    Write-ErrorMessage "cert-ctrl executable not found in downloaded archive"
    exit 1
}

$destinationBinary = Join-Path $installPath 'cert-ctrl.exe'

$serviceWasRunning = $false
if (-not $paramUserInstall) {
    try {
        $existingService = Get-Service -Name $serviceName -ErrorAction Stop
        if ($existingService.Status -eq 'Running') {
            Write-Info "Stopping Windows service '$serviceName' before updating binary..."
            Stop-Service -Name $serviceName -Force -ErrorAction Stop
            try {
                $existingService.WaitForStatus([System.ServiceProcess.ServiceControllerStatus]::Stopped, [TimeSpan]::FromSeconds(30))
            }
            catch {
                Write-WarningMessage "Timed out waiting for '$serviceName' to stop"
            }
            $serviceWasRunning = $true
        }
    }
    catch [System.InvalidOperationException] {
        # Service not installed; nothing to stop
    }
    catch {
        Write-WarningMessage "Unable to inspect or stop service '$serviceName': $($_.Exception.Message)"
    }
}

Copy-Item -Path $binaryPath -Destination $destinationBinary -Force
$serviceInstalled = Register-CertCtrlService -BinaryPath $destinationBinary -IsUserInstall:$paramUserInstall -ForceInstall:$paramForceInstall

if (-not $paramUserInstall -and $serviceWasRunning -and -not $serviceInstalled) {
    try {
        Start-Service -Name $serviceName -ErrorAction Stop
        Write-Info "Restarted Windows service '$serviceName'."
    }
    catch {
        Write-WarningMessage "Failed to restart service '$serviceName': $($_.Exception.Message)"
    }
}

Write-Success "cert-ctrl installed at $destinationBinary"
Write-Info "Binary directory: $installPath"
$normalizedInstallPath = $installPath.TrimEnd('\\')
$pathEntries = $env:PATH -split ';'
$pathPresent = $pathEntries | Where-Object { $_.TrimEnd('\\') -ieq $normalizedInstallPath }
if (-not $pathPresent) {
    $originalPath = $env:PATH
    if (-not ($env:PATH -like "*$normalizedInstallPath*")) {
        $env:PATH = ($originalPath.TrimEnd(';')) + ';' + $installPath
        Write-Info "Added $installPath to PATH for this PowerShell session."
        Write-Info "Verify now with: where.exe cert-ctrl"
    }

    $userPath = [Environment]::GetEnvironmentVariable("PATH", [EnvironmentVariableTarget]::User)
    if ([string]::IsNullOrWhiteSpace($userPath)) {
        $userPath = $originalPath
    }
    $userEntries = $userPath -split ';'
    $userHasPath = $userEntries | Where-Object { $_.TrimEnd('\\') -ieq $normalizedInstallPath }
    if (-not $userHasPath) {
        $newUserPath = if ([string]::IsNullOrWhiteSpace($userPath)) {
            $installPath
        } else {
            ($userPath.TrimEnd(';')) + ';' + $installPath
        }
        [Environment]::SetEnvironmentVariable("PATH", $newUserPath, [EnvironmentVariableTarget]::User)
        Write-Info "Persisted install directory to current user's PATH."
    }

    if (Test-Administrator) {
        $machinePath = [Environment]::GetEnvironmentVariable("PATH", [EnvironmentVariableTarget]::Machine)
        if ([string]::IsNullOrWhiteSpace($machinePath)) {
            $machinePath = $originalPath
        }
        $machineEntries = $machinePath -split ';'
        $machineHasPath = $machineEntries | Where-Object { $_.TrimEnd('\\') -ieq $normalizedInstallPath }
        if (-not $machineHasPath) {
            $newMachinePath = if ([string]::IsNullOrWhiteSpace($machinePath)) {
                $installPath
            } else {
                ($machinePath.TrimEnd(';')) + ';' + $installPath
            }
            [Environment]::SetEnvironmentVariable("PATH", $newMachinePath, [EnvironmentVariableTarget]::Machine)
            Write-Info "Persisted install directory to machine PATH."
        }
    } else {
        Write-Info "Re-open PowerShell to use cert-ctrl without specifying the full path."
    }
}
if ($serviceInstalled) {
    Write-Info "Windows service '$serviceName' is running."
} elseif (-not $paramUserInstall) {
    $manualCommand = "sc create $serviceName binPath=\"" + $destinationBinary + "\" " + $serviceArgs
    Write-Info "Register later as a service with: $manualCommand"
}
$statusCommand = 'Get-Service ' + $serviceName
Write-Info "Service status: $statusCommand"
`;
