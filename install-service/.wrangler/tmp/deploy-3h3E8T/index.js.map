{
  "version": 3,
  "sources": ["../../../node_modules/unenv/dist/runtime/_internal/utils.mjs", "../../../node_modules/unenv/dist/runtime/node/internal/perf_hooks/performance.mjs", "../../../node_modules/@cloudflare/unenv-preset/dist/runtime/polyfill/performance.mjs", "../../../node_modules/unenv/dist/runtime/node/console.mjs", "../../../node_modules/unenv/dist/runtime/mock/noop.mjs", "../../../node_modules/@cloudflare/unenv-preset/dist/runtime/node/console.mjs", "../../../node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-console", "../../../node_modules/unenv/dist/runtime/node/internal/process/hrtime.mjs", "../../../node_modules/unenv/dist/runtime/node/internal/process/process.mjs", "../../../node_modules/unenv/dist/runtime/node/internal/tty/read-stream.mjs", "../../../node_modules/unenv/dist/runtime/node/internal/tty/write-stream.mjs", "../../../node_modules/unenv/dist/runtime/node/internal/process/node-version.mjs", "../../../node_modules/@cloudflare/unenv-preset/dist/runtime/node/process.mjs", "../../../node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-process", "../../../node_modules/src/src/Router.ts", "../../../node_modules/src/src/StatusError.ts", "../../../node_modules/src/src/createResponse.ts", "../../../node_modules/src/src/json.ts", "../../../node_modules/src/src/error.ts", "../../../node_modules/src/src/status.ts", "../../../node_modules/src/src/text.ts", "../../../node_modules/src/src/html.ts", "../../../node_modules/src/src/jpeg.ts", "../../../node_modules/src/src/png.ts", "../../../node_modules/src/src/webp.ts", "../../../node_modules/src/src/withContent.ts", "../../../node_modules/src/src/withCookies.ts", "../../../node_modules/src/src/withParams.ts", "../../../node_modules/src/src/createCors.ts", "../../../src/utils/platform.js", "../../../templates/install.sh.js", "../../../templates/install.ps1.js", "../../../templates/install-macos.sh.js", "../../../src/utils/templates.js", "../../../src/utils/cors.js", "../../../src/handlers/install.js", "../../../src/utils/github.js", "../../../src/handlers/version.js", "../../../src/handlers/proxy.js", "../../../src/utils/analytics.js", "../../../src/handlers/analytics.js", "../../../src/handlers/health.js", "../../../src/utils/rateLimit.js", "../../../src/index.js"],
  "sourceRoot": "/home/jianglibo/cert-ctrl/install-service/.wrangler/tmp/deploy-3h3E8T",
  "sourcesContent": ["/* @__NO_SIDE_EFFECTS__ */\nexport function rawHeaders(headers) {\n\tconst rawHeaders = [];\n\tfor (const key in headers) {\n\t\tif (Array.isArray(headers[key])) {\n\t\t\tfor (const h of headers[key]) {\n\t\t\t\trawHeaders.push(key, h);\n\t\t\t}\n\t\t} else {\n\t\t\trawHeaders.push(key, headers[key]);\n\t\t}\n\t}\n\treturn rawHeaders;\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function mergeFns(...functions) {\n\treturn function(...args) {\n\t\tfor (const fn of functions) {\n\t\t\tfn(...args);\n\t\t}\n\t};\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function createNotImplementedError(name) {\n\treturn new Error(`[unenv] ${name} is not implemented yet!`);\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function notImplemented(name) {\n\tconst fn = () => {\n\t\tthrow createNotImplementedError(name);\n\t};\n\treturn Object.assign(fn, { __unenv__: true });\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function notImplementedAsync(name) {\n\tconst fn = notImplemented(name);\n\tfn.__promisify__ = () => notImplemented(name + \".__promisify__\");\n\tfn.native = fn;\n\treturn fn;\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function notImplementedClass(name) {\n\treturn class {\n\t\t__unenv__ = true;\n\t\tconstructor() {\n\t\t\tthrow new Error(`[unenv] ${name} is not implemented yet!`);\n\t\t}\n\t};\n}\n", "import { createNotImplementedError } from \"../../../_internal/utils.mjs\";\nconst _timeOrigin = globalThis.performance?.timeOrigin ?? Date.now();\nconst _performanceNow = globalThis.performance?.now ? globalThis.performance.now.bind(globalThis.performance) : () => Date.now() - _timeOrigin;\nconst nodeTiming = {\n\tname: \"node\",\n\tentryType: \"node\",\n\tstartTime: 0,\n\tduration: 0,\n\tnodeStart: 0,\n\tv8Start: 0,\n\tbootstrapComplete: 0,\n\tenvironment: 0,\n\tloopStart: 0,\n\tloopExit: 0,\n\tidleTime: 0,\n\tuvMetricsInfo: {\n\t\tloopCount: 0,\n\t\tevents: 0,\n\t\teventsWaiting: 0\n\t},\n\tdetail: undefined,\n\ttoJSON() {\n\t\treturn this;\n\t}\n};\n// PerformanceEntry\nexport class PerformanceEntry {\n\t__unenv__ = true;\n\tdetail;\n\tentryType = \"event\";\n\tname;\n\tstartTime;\n\tconstructor(name, options) {\n\t\tthis.name = name;\n\t\tthis.startTime = options?.startTime || _performanceNow();\n\t\tthis.detail = options?.detail;\n\t}\n\tget duration() {\n\t\treturn _performanceNow() - this.startTime;\n\t}\n\ttoJSON() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tentryType: this.entryType,\n\t\t\tstartTime: this.startTime,\n\t\t\tduration: this.duration,\n\t\t\tdetail: this.detail\n\t\t};\n\t}\n}\n// PerformanceMark\nexport const PerformanceMark = class PerformanceMark extends PerformanceEntry {\n\tentryType = \"mark\";\n\tconstructor() {\n\t\t// @ts-ignore\n\t\tsuper(...arguments);\n\t}\n\tget duration() {\n\t\treturn 0;\n\t}\n};\n// PerformanceMark\nexport class PerformanceMeasure extends PerformanceEntry {\n\tentryType = \"measure\";\n}\n// PerformanceResourceTiming\nexport class PerformanceResourceTiming extends PerformanceEntry {\n\tentryType = \"resource\";\n\tserverTiming = [];\n\tconnectEnd = 0;\n\tconnectStart = 0;\n\tdecodedBodySize = 0;\n\tdomainLookupEnd = 0;\n\tdomainLookupStart = 0;\n\tencodedBodySize = 0;\n\tfetchStart = 0;\n\tinitiatorType = \"\";\n\tname = \"\";\n\tnextHopProtocol = \"\";\n\tredirectEnd = 0;\n\tredirectStart = 0;\n\trequestStart = 0;\n\tresponseEnd = 0;\n\tresponseStart = 0;\n\tsecureConnectionStart = 0;\n\tstartTime = 0;\n\ttransferSize = 0;\n\tworkerStart = 0;\n\tresponseStatus = 0;\n}\n// PerformanceObserverEntryList\nexport class PerformanceObserverEntryList {\n\t__unenv__ = true;\n\tgetEntries() {\n\t\treturn [];\n\t}\n\tgetEntriesByName(_name, _type) {\n\t\treturn [];\n\t}\n\tgetEntriesByType(type) {\n\t\treturn [];\n\t}\n}\n// Performance\nexport class Performance {\n\t__unenv__ = true;\n\ttimeOrigin = _timeOrigin;\n\teventCounts = new Map();\n\t_entries = [];\n\t_resourceTimingBufferSize = 0;\n\tnavigation = undefined;\n\ttiming = undefined;\n\ttimerify(_fn, _options) {\n\t\tthrow createNotImplementedError(\"Performance.timerify\");\n\t}\n\tget nodeTiming() {\n\t\treturn nodeTiming;\n\t}\n\teventLoopUtilization() {\n\t\treturn {};\n\t}\n\tmarkResourceTiming() {\n\t\t// TODO: create a new PerformanceResourceTiming entry\n\t\t// so that performance.getEntries, getEntriesByName, and getEntriesByType return it\n\t\t// see: https://nodejs.org/api/perf_hooks.html#performancemarkresourcetimingtiminginfo-requestedurl-initiatortype-global-cachemode-bodyinfo-responsestatus-deliverytype\n\t\treturn new PerformanceResourceTiming(\"\");\n\t}\n\tonresourcetimingbufferfull = null;\n\tnow() {\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\n\t\tif (this.timeOrigin === _timeOrigin) {\n\t\t\treturn _performanceNow();\n\t\t}\n\t\treturn Date.now() - this.timeOrigin;\n\t}\n\tclearMarks(markName) {\n\t\tthis._entries = markName ? this._entries.filter((e) => e.name !== markName) : this._entries.filter((e) => e.entryType !== \"mark\");\n\t}\n\tclearMeasures(measureName) {\n\t\tthis._entries = measureName ? this._entries.filter((e) => e.name !== measureName) : this._entries.filter((e) => e.entryType !== \"measure\");\n\t}\n\tclearResourceTimings() {\n\t\tthis._entries = this._entries.filter((e) => e.entryType !== \"resource\" || e.entryType !== \"navigation\");\n\t}\n\tgetEntries() {\n\t\treturn this._entries;\n\t}\n\tgetEntriesByName(name, type) {\n\t\treturn this._entries.filter((e) => e.name === name && (!type || e.entryType === type));\n\t}\n\tgetEntriesByType(type) {\n\t\treturn this._entries.filter((e) => e.entryType === type);\n\t}\n\tmark(name, options) {\n\t\t// @ts-expect-error constructor is not protected\n\t\tconst entry = new PerformanceMark(name, options);\n\t\tthis._entries.push(entry);\n\t\treturn entry;\n\t}\n\tmeasure(measureName, startOrMeasureOptions, endMark) {\n\t\tlet start;\n\t\tlet end;\n\t\tif (typeof startOrMeasureOptions === \"string\") {\n\t\t\tstart = this.getEntriesByName(startOrMeasureOptions, \"mark\")[0]?.startTime;\n\t\t\tend = this.getEntriesByName(endMark, \"mark\")[0]?.startTime;\n\t\t} else {\n\t\t\tstart = Number.parseFloat(startOrMeasureOptions?.start) || this.now();\n\t\t\tend = Number.parseFloat(startOrMeasureOptions?.end) || this.now();\n\t\t}\n\t\tconst entry = new PerformanceMeasure(measureName, {\n\t\t\tstartTime: start,\n\t\t\tdetail: {\n\t\t\t\tstart,\n\t\t\t\tend\n\t\t\t}\n\t\t});\n\t\tthis._entries.push(entry);\n\t\treturn entry;\n\t}\n\tsetResourceTimingBufferSize(maxSize) {\n\t\tthis._resourceTimingBufferSize = maxSize;\n\t}\n\taddEventListener(type, listener, options) {\n\t\tthrow createNotImplementedError(\"Performance.addEventListener\");\n\t}\n\tremoveEventListener(type, listener, options) {\n\t\tthrow createNotImplementedError(\"Performance.removeEventListener\");\n\t}\n\tdispatchEvent(event) {\n\t\tthrow createNotImplementedError(\"Performance.dispatchEvent\");\n\t}\n\ttoJSON() {\n\t\treturn this;\n\t}\n}\n// PerformanceObserver\nexport class PerformanceObserver {\n\t__unenv__ = true;\n\tstatic supportedEntryTypes = [];\n\t_callback = null;\n\tconstructor(callback) {\n\t\tthis._callback = callback;\n\t}\n\ttakeRecords() {\n\t\treturn [];\n\t}\n\tdisconnect() {\n\t\tthrow createNotImplementedError(\"PerformanceObserver.disconnect\");\n\t}\n\tobserve(options) {\n\t\tthrow createNotImplementedError(\"PerformanceObserver.observe\");\n\t}\n\tbind(fn) {\n\t\treturn fn;\n\t}\n\trunInAsyncScope(fn, thisArg, ...args) {\n\t\treturn fn.call(thisArg, ...args);\n\t}\n\tasyncId() {\n\t\treturn 0;\n\t}\n\ttriggerAsyncId() {\n\t\treturn 0;\n\t}\n\temitDestroy() {\n\t\treturn this;\n\t}\n}\n// workerd implements a subset of globalThis.performance (as of last check, only timeOrigin set to 0 + now() implemented)\n// We already use performance.now() from globalThis.performance, if provided (see top of this file)\n// If we detect this condition, we can just use polyfill instead.\nexport const performance = globalThis.performance && \"addEventListener\" in globalThis.performance ? globalThis.performance : new Performance();\n", "import {\n  performance,\n  Performance,\n  PerformanceEntry,\n  PerformanceMark,\n  PerformanceMeasure,\n  PerformanceObserver,\n  PerformanceObserverEntryList,\n  PerformanceResourceTiming\n} from \"node:perf_hooks\";\nglobalThis.performance = performance;\nglobalThis.Performance = Performance;\nglobalThis.PerformanceEntry = PerformanceEntry;\nglobalThis.PerformanceMark = PerformanceMark;\nglobalThis.PerformanceMeasure = PerformanceMeasure;\nglobalThis.PerformanceObserver = PerformanceObserver;\nglobalThis.PerformanceObserverEntryList = PerformanceObserverEntryList;\nglobalThis.PerformanceResourceTiming = PerformanceResourceTiming;\n", "import { Writable } from \"node:stream\";\nimport noop from \"../mock/noop.mjs\";\nimport { notImplemented, notImplementedClass } from \"../_internal/utils.mjs\";\nconst _console = globalThis.console;\n// undocumented public APIs\nexport const _ignoreErrors = true;\nexport const _stderr = new Writable();\nexport const _stdout = new Writable();\nexport const log = _console?.log ?? noop;\nexport const info = _console?.info ?? log;\nexport const trace = _console?.trace ?? info;\nexport const debug = _console?.debug ?? log;\nexport const table = _console?.table ?? log;\nexport const error = _console?.error ?? log;\nexport const warn = _console?.warn ?? error;\n// https://developer.chrome.com/docs/devtools/console/api#createtask\nexport const createTask = _console?.createTask ?? /* @__PURE__ */ notImplemented(\"console.createTask\");\nexport const assert = /* @__PURE__ */ notImplemented(\"console.assert\");\n// noop\nexport const clear = _console?.clear ?? noop;\nexport const count = _console?.count ?? noop;\nexport const countReset = _console?.countReset ?? noop;\nexport const dir = _console?.dir ?? noop;\nexport const dirxml = _console?.dirxml ?? noop;\nexport const group = _console?.group ?? noop;\nexport const groupEnd = _console?.groupEnd ?? noop;\nexport const groupCollapsed = _console?.groupCollapsed ?? noop;\nexport const profile = _console?.profile ?? noop;\nexport const profileEnd = _console?.profileEnd ?? noop;\nexport const time = _console?.time ?? noop;\nexport const timeEnd = _console?.timeEnd ?? noop;\nexport const timeLog = _console?.timeLog ?? noop;\nexport const timeStamp = _console?.timeStamp ?? noop;\nexport const Console = _console?.Console ?? /* @__PURE__ */ notImplementedClass(\"console.Console\");\nexport const _times = /* @__PURE__ */ new Map();\nexport function context() {\n\t// TODO: Should be Console with all the methods\n\treturn _console;\n}\nexport const _stdoutErrorHandler = noop;\nexport const _stderrErrorHandler = noop;\nexport default {\n\t_times,\n\t_ignoreErrors,\n\t_stdoutErrorHandler,\n\t_stderrErrorHandler,\n\t_stdout,\n\t_stderr,\n\tassert,\n\tclear,\n\tConsole,\n\tcount,\n\tcountReset,\n\tdebug,\n\tdir,\n\tdirxml,\n\terror,\n\tcontext,\n\tcreateTask,\n\tgroup,\n\tgroupEnd,\n\tgroupCollapsed,\n\tinfo,\n\tlog,\n\tprofile,\n\tprofileEnd,\n\ttable,\n\ttime,\n\ttimeEnd,\n\ttimeLog,\n\ttimeStamp,\n\ttrace,\n\twarn\n};\n", "export default Object.assign(() => {}, { __unenv__: true });\n", "import {\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times,\n  Console\n} from \"unenv/node/console\";\nexport {\n  Console,\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times\n} from \"unenv/node/console\";\nconst workerdConsole = globalThis[\"console\"];\nexport const {\n  assert,\n  clear,\n  // @ts-expect-error undocumented public API\n  context,\n  count,\n  countReset,\n  // @ts-expect-error undocumented public API\n  createTask,\n  debug,\n  dir,\n  dirxml,\n  error,\n  group,\n  groupCollapsed,\n  groupEnd,\n  info,\n  log,\n  profile,\n  profileEnd,\n  table,\n  time,\n  timeEnd,\n  timeLog,\n  timeStamp,\n  trace,\n  warn\n} = workerdConsole;\nObject.assign(workerdConsole, {\n  Console,\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times\n});\nexport default workerdConsole;\n", "import { default as defaultExport } from \"@cloudflare/unenv-preset/node/console\";\nglobalThis.console = defaultExport;", "// https://nodejs.org/api/process.html#processhrtime\nexport const hrtime = /* @__PURE__ */ Object.assign(function hrtime(startTime) {\n\tconst now = Date.now();\n\t// millis to seconds\n\tconst seconds = Math.trunc(now / 1e3);\n\t// convert millis to nanos\n\tconst nanos = now % 1e3 * 1e6;\n\tif (startTime) {\n\t\tlet diffSeconds = seconds - startTime[0];\n\t\tlet diffNanos = nanos - startTime[0];\n\t\tif (diffNanos < 0) {\n\t\t\tdiffSeconds = diffSeconds - 1;\n\t\t\tdiffNanos = 1e9 + diffNanos;\n\t\t}\n\t\treturn [diffSeconds, diffNanos];\n\t}\n\treturn [seconds, nanos];\n}, { bigint: function bigint() {\n\t// Convert milliseconds to nanoseconds\n\treturn BigInt(Date.now() * 1e6);\n} });\n", "import { EventEmitter } from \"node:events\";\nimport { ReadStream, WriteStream } from \"node:tty\";\nimport { notImplemented, createNotImplementedError } from \"../../../_internal/utils.mjs\";\n// node-version.ts is generated at build time\nimport { NODE_VERSION } from \"./node-version.mjs\";\nexport class Process extends EventEmitter {\n\tenv;\n\thrtime;\n\tnextTick;\n\tconstructor(impl) {\n\t\tsuper();\n\t\tthis.env = impl.env;\n\t\tthis.hrtime = impl.hrtime;\n\t\tthis.nextTick = impl.nextTick;\n\t\tfor (const prop of [...Object.getOwnPropertyNames(Process.prototype), ...Object.getOwnPropertyNames(EventEmitter.prototype)]) {\n\t\t\tconst value = this[prop];\n\t\t\tif (typeof value === \"function\") {\n\t\t\t\tthis[prop] = value.bind(this);\n\t\t\t}\n\t\t}\n\t}\n\t// --- event emitter ---\n\temitWarning(warning, type, code) {\n\t\tconsole.warn(`${code ? `[${code}] ` : \"\"}${type ? `${type}: ` : \"\"}${warning}`);\n\t}\n\temit(...args) {\n\t\t// @ts-ignore\n\t\treturn super.emit(...args);\n\t}\n\tlisteners(eventName) {\n\t\treturn super.listeners(eventName);\n\t}\n\t// --- stdio (lazy initializers) ---\n\t#stdin;\n\t#stdout;\n\t#stderr;\n\tget stdin() {\n\t\treturn this.#stdin ??= new ReadStream(0);\n\t}\n\tget stdout() {\n\t\treturn this.#stdout ??= new WriteStream(1);\n\t}\n\tget stderr() {\n\t\treturn this.#stderr ??= new WriteStream(2);\n\t}\n\t// --- cwd ---\n\t#cwd = \"/\";\n\tchdir(cwd) {\n\t\tthis.#cwd = cwd;\n\t}\n\tcwd() {\n\t\treturn this.#cwd;\n\t}\n\t// --- dummy props and getters ---\n\tarch = \"\";\n\tplatform = \"\";\n\targv = [];\n\targv0 = \"\";\n\texecArgv = [];\n\texecPath = \"\";\n\ttitle = \"\";\n\tpid = 200;\n\tppid = 100;\n\tget version() {\n\t\treturn `v${NODE_VERSION}`;\n\t}\n\tget versions() {\n\t\treturn { node: NODE_VERSION };\n\t}\n\tget allowedNodeEnvironmentFlags() {\n\t\treturn new Set();\n\t}\n\tget sourceMapsEnabled() {\n\t\treturn false;\n\t}\n\tget debugPort() {\n\t\treturn 0;\n\t}\n\tget throwDeprecation() {\n\t\treturn false;\n\t}\n\tget traceDeprecation() {\n\t\treturn false;\n\t}\n\tget features() {\n\t\treturn {};\n\t}\n\tget release() {\n\t\treturn {};\n\t}\n\tget connected() {\n\t\treturn false;\n\t}\n\tget config() {\n\t\treturn {};\n\t}\n\tget moduleLoadList() {\n\t\treturn [];\n\t}\n\tconstrainedMemory() {\n\t\treturn 0;\n\t}\n\tavailableMemory() {\n\t\treturn 0;\n\t}\n\tuptime() {\n\t\treturn 0;\n\t}\n\tresourceUsage() {\n\t\treturn {};\n\t}\n\t// --- noop methods ---\n\tref() {\n\t\t// noop\n\t}\n\tunref() {\n\t\t// noop\n\t}\n\t// --- unimplemented methods ---\n\tumask() {\n\t\tthrow createNotImplementedError(\"process.umask\");\n\t}\n\tgetBuiltinModule() {\n\t\treturn undefined;\n\t}\n\tgetActiveResourcesInfo() {\n\t\tthrow createNotImplementedError(\"process.getActiveResourcesInfo\");\n\t}\n\texit() {\n\t\tthrow createNotImplementedError(\"process.exit\");\n\t}\n\treallyExit() {\n\t\tthrow createNotImplementedError(\"process.reallyExit\");\n\t}\n\tkill() {\n\t\tthrow createNotImplementedError(\"process.kill\");\n\t}\n\tabort() {\n\t\tthrow createNotImplementedError(\"process.abort\");\n\t}\n\tdlopen() {\n\t\tthrow createNotImplementedError(\"process.dlopen\");\n\t}\n\tsetSourceMapsEnabled() {\n\t\tthrow createNotImplementedError(\"process.setSourceMapsEnabled\");\n\t}\n\tloadEnvFile() {\n\t\tthrow createNotImplementedError(\"process.loadEnvFile\");\n\t}\n\tdisconnect() {\n\t\tthrow createNotImplementedError(\"process.disconnect\");\n\t}\n\tcpuUsage() {\n\t\tthrow createNotImplementedError(\"process.cpuUsage\");\n\t}\n\tsetUncaughtExceptionCaptureCallback() {\n\t\tthrow createNotImplementedError(\"process.setUncaughtExceptionCaptureCallback\");\n\t}\n\thasUncaughtExceptionCaptureCallback() {\n\t\tthrow createNotImplementedError(\"process.hasUncaughtExceptionCaptureCallback\");\n\t}\n\tinitgroups() {\n\t\tthrow createNotImplementedError(\"process.initgroups\");\n\t}\n\topenStdin() {\n\t\tthrow createNotImplementedError(\"process.openStdin\");\n\t}\n\tassert() {\n\t\tthrow createNotImplementedError(\"process.assert\");\n\t}\n\tbinding() {\n\t\tthrow createNotImplementedError(\"process.binding\");\n\t}\n\t// --- attached interfaces ---\n\tpermission = { has: /* @__PURE__ */ notImplemented(\"process.permission.has\") };\n\treport = {\n\t\tdirectory: \"\",\n\t\tfilename: \"\",\n\t\tsignal: \"SIGUSR2\",\n\t\tcompact: false,\n\t\treportOnFatalError: false,\n\t\treportOnSignal: false,\n\t\treportOnUncaughtException: false,\n\t\tgetReport: /* @__PURE__ */ notImplemented(\"process.report.getReport\"),\n\t\twriteReport: /* @__PURE__ */ notImplemented(\"process.report.writeReport\")\n\t};\n\tfinalization = {\n\t\tregister: /* @__PURE__ */ notImplemented(\"process.finalization.register\"),\n\t\tunregister: /* @__PURE__ */ notImplemented(\"process.finalization.unregister\"),\n\t\tregisterBeforeExit: /* @__PURE__ */ notImplemented(\"process.finalization.registerBeforeExit\")\n\t};\n\tmemoryUsage = Object.assign(() => ({\n\t\tarrayBuffers: 0,\n\t\trss: 0,\n\t\texternal: 0,\n\t\theapTotal: 0,\n\t\theapUsed: 0\n\t}), { rss: () => 0 });\n\t// --- undefined props ---\n\tmainModule = undefined;\n\tdomain = undefined;\n\t// optional\n\tsend = undefined;\n\texitCode = undefined;\n\tchannel = undefined;\n\tgetegid = undefined;\n\tgeteuid = undefined;\n\tgetgid = undefined;\n\tgetgroups = undefined;\n\tgetuid = undefined;\n\tsetegid = undefined;\n\tseteuid = undefined;\n\tsetgid = undefined;\n\tsetgroups = undefined;\n\tsetuid = undefined;\n\t// internals\n\t_events = undefined;\n\t_eventsCount = undefined;\n\t_exiting = undefined;\n\t_maxListeners = undefined;\n\t_debugEnd = undefined;\n\t_debugProcess = undefined;\n\t_fatalException = undefined;\n\t_getActiveHandles = undefined;\n\t_getActiveRequests = undefined;\n\t_kill = undefined;\n\t_preload_modules = undefined;\n\t_rawDebug = undefined;\n\t_startProfilerIdleNotifier = undefined;\n\t_stopProfilerIdleNotifier = undefined;\n\t_tickCallback = undefined;\n\t_disconnect = undefined;\n\t_handleQueue = undefined;\n\t_pendingMessage = undefined;\n\t_channel = undefined;\n\t_send = undefined;\n\t_linkedBinding = undefined;\n}\n", "export class ReadStream {\n\tfd;\n\tisRaw = false;\n\tisTTY = false;\n\tconstructor(fd) {\n\t\tthis.fd = fd;\n\t}\n\tsetRawMode(mode) {\n\t\tthis.isRaw = mode;\n\t\treturn this;\n\t}\n}\n", "export class WriteStream {\n\tfd;\n\tcolumns = 80;\n\trows = 24;\n\tisTTY = false;\n\tconstructor(fd) {\n\t\tthis.fd = fd;\n\t}\n\tclearLine(dir, callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tclearScreenDown(callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tcursorTo(x, y, callback) {\n\t\tcallback && typeof callback === \"function\" && callback();\n\t\treturn false;\n\t}\n\tmoveCursor(dx, dy, callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tgetColorDepth(env) {\n\t\treturn 1;\n\t}\n\thasColors(count, env) {\n\t\treturn false;\n\t}\n\tgetWindowSize() {\n\t\treturn [this.columns, this.rows];\n\t}\n\twrite(str, encoding, cb) {\n\t\tif (str instanceof Uint8Array) {\n\t\t\tstr = new TextDecoder().decode(str);\n\t\t}\n\t\ttry {\n\t\t\tconsole.log(str);\n\t\t} catch {}\n\t\tcb && typeof cb === \"function\" && cb();\n\t\treturn false;\n\t}\n}\n", "// Extracted from .nvmrc\nexport const NODE_VERSION = \"22.14.0\";\n", "import { hrtime as UnenvHrTime } from \"unenv/node/internal/process/hrtime\";\nimport { Process as UnenvProcess } from \"unenv/node/internal/process/process\";\nconst globalProcess = globalThis[\"process\"];\nexport const getBuiltinModule = globalProcess.getBuiltinModule;\nconst workerdProcess = getBuiltinModule(\"node:process\");\nconst isWorkerdProcessV2 = globalThis.Cloudflare.compatibilityFlags.enable_nodejs_process_v2;\nconst unenvProcess = new UnenvProcess({\n  env: globalProcess.env,\n  // `hrtime` is only available from workerd process v2\n  hrtime: isWorkerdProcessV2 ? workerdProcess.hrtime : UnenvHrTime,\n  // `nextTick` is available from workerd process v1\n  nextTick: workerdProcess.nextTick\n});\nexport const { exit, features, platform } = workerdProcess;\nexport const {\n  // Always implemented by workerd\n  env,\n  // Only implemented in workerd v2\n  hrtime,\n  // Always implemented by workerd\n  nextTick\n} = unenvProcess;\nexport const {\n  _channel,\n  _disconnect,\n  _events,\n  _eventsCount,\n  _handleQueue,\n  _maxListeners,\n  _pendingMessage,\n  _send,\n  assert,\n  disconnect,\n  mainModule\n} = unenvProcess;\nexport const {\n  // @ts-expect-error `_debugEnd` is missing typings\n  _debugEnd,\n  // @ts-expect-error `_debugProcess` is missing typings\n  _debugProcess,\n  // @ts-expect-error `_exiting` is missing typings\n  _exiting,\n  // @ts-expect-error `_fatalException` is missing typings\n  _fatalException,\n  // @ts-expect-error `_getActiveHandles` is missing typings\n  _getActiveHandles,\n  // @ts-expect-error `_getActiveRequests` is missing typings\n  _getActiveRequests,\n  // @ts-expect-error `_kill` is missing typings\n  _kill,\n  // @ts-expect-error `_linkedBinding` is missing typings\n  _linkedBinding,\n  // @ts-expect-error `_preload_modules` is missing typings\n  _preload_modules,\n  // @ts-expect-error `_rawDebug` is missing typings\n  _rawDebug,\n  // @ts-expect-error `_startProfilerIdleNotifier` is missing typings\n  _startProfilerIdleNotifier,\n  // @ts-expect-error `_stopProfilerIdleNotifier` is missing typings\n  _stopProfilerIdleNotifier,\n  // @ts-expect-error `_tickCallback` is missing typings\n  _tickCallback,\n  abort,\n  addListener,\n  allowedNodeEnvironmentFlags,\n  arch,\n  argv,\n  argv0,\n  availableMemory,\n  // @ts-expect-error `binding` is missing typings\n  binding,\n  channel,\n  chdir,\n  config,\n  connected,\n  constrainedMemory,\n  cpuUsage,\n  cwd,\n  debugPort,\n  dlopen,\n  // @ts-expect-error `domain` is missing typings\n  domain,\n  emit,\n  emitWarning,\n  eventNames,\n  execArgv,\n  execPath,\n  exitCode,\n  finalization,\n  getActiveResourcesInfo,\n  getegid,\n  geteuid,\n  getgid,\n  getgroups,\n  getMaxListeners,\n  getuid,\n  hasUncaughtExceptionCaptureCallback,\n  // @ts-expect-error `initgroups` is missing typings\n  initgroups,\n  kill,\n  listenerCount,\n  listeners,\n  loadEnvFile,\n  memoryUsage,\n  // @ts-expect-error `moduleLoadList` is missing typings\n  moduleLoadList,\n  off,\n  on,\n  once,\n  // @ts-expect-error `openStdin` is missing typings\n  openStdin,\n  permission,\n  pid,\n  ppid,\n  prependListener,\n  prependOnceListener,\n  rawListeners,\n  // @ts-expect-error `reallyExit` is missing typings\n  reallyExit,\n  ref,\n  release,\n  removeAllListeners,\n  removeListener,\n  report,\n  resourceUsage,\n  send,\n  setegid,\n  seteuid,\n  setgid,\n  setgroups,\n  setMaxListeners,\n  setSourceMapsEnabled,\n  setuid,\n  setUncaughtExceptionCaptureCallback,\n  sourceMapsEnabled,\n  stderr,\n  stdin,\n  stdout,\n  throwDeprecation,\n  title,\n  traceDeprecation,\n  umask,\n  unref,\n  uptime,\n  version,\n  versions\n} = isWorkerdProcessV2 ? workerdProcess : unenvProcess;\nconst _process = {\n  abort,\n  addListener,\n  allowedNodeEnvironmentFlags,\n  hasUncaughtExceptionCaptureCallback,\n  setUncaughtExceptionCaptureCallback,\n  loadEnvFile,\n  sourceMapsEnabled,\n  arch,\n  argv,\n  argv0,\n  chdir,\n  config,\n  connected,\n  constrainedMemory,\n  availableMemory,\n  cpuUsage,\n  cwd,\n  debugPort,\n  dlopen,\n  disconnect,\n  emit,\n  emitWarning,\n  env,\n  eventNames,\n  execArgv,\n  execPath,\n  exit,\n  finalization,\n  features,\n  getBuiltinModule,\n  getActiveResourcesInfo,\n  getMaxListeners,\n  hrtime,\n  kill,\n  listeners,\n  listenerCount,\n  memoryUsage,\n  nextTick,\n  on,\n  off,\n  once,\n  pid,\n  platform,\n  ppid,\n  prependListener,\n  prependOnceListener,\n  rawListeners,\n  release,\n  removeAllListeners,\n  removeListener,\n  report,\n  resourceUsage,\n  setMaxListeners,\n  setSourceMapsEnabled,\n  stderr,\n  stdin,\n  stdout,\n  title,\n  throwDeprecation,\n  traceDeprecation,\n  umask,\n  uptime,\n  version,\n  versions,\n  // @ts-expect-error old API\n  domain,\n  initgroups,\n  moduleLoadList,\n  reallyExit,\n  openStdin,\n  assert,\n  binding,\n  send,\n  exitCode,\n  channel,\n  getegid,\n  geteuid,\n  getgid,\n  getgroups,\n  getuid,\n  setegid,\n  seteuid,\n  setgid,\n  setgroups,\n  setuid,\n  permission,\n  mainModule,\n  _events,\n  _eventsCount,\n  _exiting,\n  _maxListeners,\n  _debugEnd,\n  _debugProcess,\n  _fatalException,\n  _getActiveHandles,\n  _getActiveRequests,\n  _kill,\n  _preload_modules,\n  _rawDebug,\n  _startProfilerIdleNotifier,\n  _stopProfilerIdleNotifier,\n  _tickCallback,\n  _disconnect,\n  _handleQueue,\n  _pendingMessage,\n  _channel,\n  _send,\n  _linkedBinding\n};\nexport default _process;\n", "import { default as defaultExport } from \"@cloudflare/unenv-preset/node/process\";\nglobalThis.process = defaultExport;", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "export function detectPlatform(userAgent, scriptType) {\n  const ua = userAgent.toLowerCase();\n  \n  // If PowerShell script requested, it's Windows\n  if (scriptType === 'powershell') {\n    return 'windows';\n  }\n  \n  // Detect from User-Agent\n  if (ua.includes('windows') || ua.includes('win32') || ua.includes('win64')) {\n    return 'windows';\n  }\n  \n  if (ua.includes('macintosh') || ua.includes('darwin') || ua.includes('mac os')) {\n    return 'macos';\n  }\n  \n  if (ua.includes('linux')) {\n    return 'linux';\n  }\n  \n  // Default fallback based on script type\n  return scriptType === 'powershell' ? 'windows' : 'linux';\n}\n\nexport function detectArchitecture(userAgent) {\n  const ua = userAgent.toLowerCase();\n  \n  // ARM detection\n  if (ua.includes('arm64') || ua.includes('aarch64')) {\n    return 'arm64';\n  }\n  \n  if (ua.includes('armv7') || ua.includes('armhf')) {\n    return 'arm';\n  }\n  \n  // x86 detection\n  if (ua.includes('x86_64') || ua.includes('amd64') || ua.includes('win64')) {\n    return 'x64';\n  }\n  \n  if (ua.includes('i386') || ua.includes('i686') || ua.includes('x86')) {\n    return 'x86';\n  }\n  \n  // Default to x64 for most modern systems\n  return 'x64';\n}\n\nexport function detectShell(userAgent) {\n  const ua = userAgent.toLowerCase();\n  \n  if (ua.includes('powershell')) {\n    return 'powershell';\n  }\n  \n  if (ua.includes('bash')) {\n    return 'bash';\n  }\n  \n  if (ua.includes('zsh')) {\n    return 'zsh';\n  }\n  \n  if (ua.includes('fish')) {\n    return 'fish';\n  }\n  \n  if (ua.includes('curl')) {\n    return 'bash'; // curl usually pipes to bash\n  }\n  \n  return 'bash'; // Default\n}\n\nexport function isCI(userAgent, headers) {\n  const ua = userAgent.toLowerCase();\n  \n  // Common CI user agents\n  const ciIndicators = [\n    'github-actions',\n    'travis',\n    'circleci',\n    'jenkins',\n    'gitlab-ci',\n    'azure-pipelines',\n    'buildkite',\n    'teamcity',\n    'bamboo'\n  ];\n  \n  return ciIndicators.some(ci => ua.includes(ci));\n}\n\nexport function isDocker(userAgent, headers) {\n  const ua = userAgent.toLowerCase();\n  return ua.includes('docker') || ua.includes('container');\n}", "export const bashTemplate = `#!/bin/bash\n# cert-ctrl installation script\n# Generated by: {{BASE_URL}}\n# Platform: {{PLATFORM}}-{{ARCHITECTURE}}\n# Mirror: {{MIRROR_NAME}}\n# Country: {{COUNTRY}}\n\nset -euo pipefail\n\n# Configuration from service\nPLATFORM=\"{{PLATFORM}}\"\nARCHITECTURE=\"{{ARCHITECTURE}}\"\nMIRROR_URL=\"{{MIRROR_URL}}\"\nBASE_URL=\"{{BASE_URL}}\"\nVERSION=\"{{VERSION}}\"\n# System installation only - user installation removed\n# USER_INSTALL is always false\nVERBOSE=\"\\${VERBOSE:-{{VERBOSE}}}\"\nFORCE=\"\\${FORCE:-{{FORCE}}}\"\nDRY_RUN=\"\\${DRY_RUN:-{{DRY_RUN}}}\"\n\n# Advanced configuration (overridable via environment or flags)\nCONFIG_DIR=\"\\${CONFIG_DIR:-}\"\nINSTALL_SERVICE=\"\\${INSTALL_SERVICE:-}\"\nENABLE_SERVICE=\"\\${ENABLE_SERVICE:-}\"\nSERVICE_NAME=\"\\${SERVICE_NAME:-certctrl.service}\"\nSERVICE_ACCOUNT=\"\\${SERVICE_ACCOUNT:-root}\"\nSERVICE_DESCRIPTION=\"cert-ctrl certificate management agent\"\nNONINTERACTIVE=\"\\${NONINTERACTIVE:-false}\"\nCHANNEL=\"\\${CHANNEL:-stable}\"\n\nLAST_DOWNLOAD_URL=\"\"\nLAST_CHECKSUM_URL=\"\"\nCONFIG_DIR_PLACEHOLDER=\"{{CONFIG_DIR}}\"\nif [ -z \"$CONFIG_DIR\" ] && [ -n \"$CONFIG_DIR_PLACEHOLDER\" ]; then\n    CONFIG_DIR=\"$CONFIG_DIR_PLACEHOLDER\"\nfi\n\nSTATE_DIR=\"\\${STATE_DIR:-/var/lib/certctrl}\"\nSTATE_DIR_PLACEHOLDER=\"{{STATE_DIR}}\"\nif [ -z \"$STATE_DIR\" ] && [ -n \"$STATE_DIR_PLACEHOLDER\" ]; then\n    STATE_DIR=\"$STATE_DIR_PLACEHOLDER\"\nfi\nSTATE_DIR_NAME=\"$(basename \"$STATE_DIR\")\"\nRESTART_SERVICE_AFTER_INSTALL=\"false\"\nSHA256_CMD=()\n\n# Override with environment or parameters\nINSTALL_DIR=\"\\${INSTALL_DIR:-{{INSTALL_DIR}}}\"\nif [ -z \"$INSTALL_DIR\" ]; then\n    INSTALL_DIR=\"/usr/local/bin\"\nfi\n\n# Colors\nRED='\\x1b[0;31m'\nGREEN='\\x1b[0;32m'\nYELLOW='\\x1b[1;33m'\nBLUE='\\x1b[0;34m'\nNC='\\x1b[0m'\n\n# Logging functions\nlog_info() { echo -e \"\\${BLUE}[INFO]\\${NC} $1\" >&2; }\nlog_success() { echo -e \"\\${GREEN}[SUCCESS]\\${NC} $1\" >&2; }\nlog_warning() { echo -e \"\\${YELLOW}[WARNING]\\${NC} $1\" >&2; }\nlog_error() { echo -e \"\\${RED}[ERROR]\\${NC} $1\" >&2; }\nlog_verbose() {\n    if [ \"$VERBOSE\" = \"true\" ]; then\n        echo -e \"\\${BLUE}[VERBOSE]\\${NC} $1\" >&2\n    fi\n}\n\n# Detect platform if not provided\ndetect_platform() {\n    if [ -n \"$PLATFORM\" ] && [ \"$PLATFORM\" != \"unknown\" ]; then\n        echo \"$PLATFORM-$ARCHITECTURE\"\n        return\n    fi\n    \n    local platform=\"\"\n    local arch=\"\"\n    \n    case \"$(uname -s)\" in\n        Linux*)     platform=\"linux\" ;;\n        Darwin*)    platform=\"macos\" ;;\n        *)          log_error \"Unsupported platform: $(uname -s)\"; exit 1 ;;\n    esac\n    \n    case \"$(uname -m)\" in\n        x86_64|amd64)   arch=\"x64\" ;;\n        aarch64|arm64)  arch=\"arm64\" ;;\n        armv7l)         arch=\"arm\" ;;\n        *)              arch=\"x64\" ;; # Default\n    esac\n    \n    echo \"\\${platform}-\\${arch}\"\n}\n\n# Check dependencies\nset_checksum_tool() {\n    if command -v sha256sum >/dev/null 2>&1; then\n        SHA256_CMD=(sha256sum)\n        return 0\n    fi\n\n    if command -v shasum >/dev/null 2>&1; then\n        SHA256_CMD=(shasum -a 256)\n        return 0\n    fi\n\n    log_error \"Required dependency 'sha256sum' (or 'shasum') is not installed.\"\n    log_info \"macOS: brew install coreutils\"\n    exit 1\n}\n\ncheck_dependencies() {\n    local deps=(\"curl\" \"tar\" \"gzip\")\n    if [ \"$INSTALL_SERVICE\" = \"true\" ]; then\n        deps+=(\"systemctl\")\n    fi\n\n    for dep in \"\\${deps[@]}\"; do\n        if ! command -v \"$dep\" &> /dev/null; then\n            log_error \"Required dependency '$dep' is not installed.\"\n            exit 1\n        fi\n    done\n    \n    set_checksum_tool\n\n    log_verbose \"All dependencies are available\"\n}\n\n# Resolve version\nresolve_version() {\n    if [ \"$VERSION\" = \"latest\" ]; then\n        log_info \"Resolving latest version...\"\n        local latest_url=\"$BASE_URL/api/version/latest\"\n        \n        if command -v jq &> /dev/null; then\n            VERSION=$(curl -fsSL \"$latest_url\" | jq -r '.version')\n        else\n            VERSION=$(curl -fsSL \"$latest_url\" | grep '\"version\":' | sed -E 's/.*\"version\": \"([^\\\"]+)\".*/\\\\1/')\n        fi\n        \n        if [ -z \"$VERSION\" ] || [ \"$VERSION\" = \"null\" ]; then\n            log_error \"Failed to resolve latest version\"\n            exit 1\n        fi\n        \n        log_verbose \"Resolved latest version: $VERSION\"\n    fi\n}\n\n# Download binary\ndownload_binary() {\n    local platform_arch=\"$1\"\n    \n    # Use proxy if available, otherwise direct GitHub\n    local download_url\n    if [ \"$MIRROR_URL\" = \"$BASE_URL/releases/proxy\" ]; then\n        download_url=\"$MIRROR_URL/$VERSION/cert-ctrl-$platform_arch.tar.gz\"\n    else\n        download_url=\"$MIRROR_URL/{{GITHUB_REPO_OWNER}}/{{GITHUB_REPO_NAME}}/releases/download/$VERSION/cert-ctrl-$platform_arch.tar.gz\"\n    fi\n\n    LAST_DOWNLOAD_URL=\"$download_url\"\n    \n    if [ \"$DRY_RUN\" = \"true\" ]; then\n        log_info \"DRY RUN: Would download cert-ctrl from $download_url\"\n        echo \"\"\n        return 0\n    fi\n\n    local temp_file=$(mktemp)\n    \n    log_info \"Downloading cert-ctrl $VERSION for $platform_arch...\"\n    log_verbose \"Download URL: $download_url\"\n    \n    if ! curl -fsSL \"$download_url\" -o \"$temp_file\"; then\n        log_error \"Failed to download cert-ctrl\"\n        rm -f \"$temp_file\"\n        exit 1\n    fi\n    \n    echo \"$temp_file\"\n}\n\ndownload_checksum() {\n    local platform_arch=\"$1\"\n\n    if [ \"$DRY_RUN\" = \"true\" ]; then\n        LAST_CHECKSUM_URL=\"\"\n        return 0\n    fi\n\n    local checksum_url\n    if [ \"$MIRROR_URL\" = \"$BASE_URL/releases/proxy\" ]; then\n        checksum_url=\"$MIRROR_URL/$VERSION/cert-ctrl-$platform_arch.tar.gz.sha256\"\n    else\n        checksum_url=\"$MIRROR_URL/{{GITHUB_REPO_OWNER}}/{{GITHUB_REPO_NAME}}/releases/download/$VERSION/cert-ctrl-$platform_arch.tar.gz.sha256\"\n    fi\n\n    LAST_CHECKSUM_URL=\"$checksum_url\"\n\n    local checksum_file=$(mktemp)\n    log_verbose \"Fetching checksum from $checksum_url\"\n\n    if curl -fsSL \"$checksum_url\" -o \"$checksum_file\"; then\n        echo \"$checksum_file\"\n        return 0\n    fi\n\n    log_warning \"Checksum file not available; skipping verification\"\n    rm -f \"$checksum_file\"\n    echo \"\"\n}\n\nverify_checksum() {\n    local archive_file=\"$1\"\n    local checksum_file=\"$2\"\n\n    if [ -z \"$checksum_file\" ]; then\n        return 0\n    fi\n\n    if [ ! -f \"$checksum_file\" ]; then\n        log_warning \"Checksum file missing; skipping verification\"\n        return 0\n    fi\n\n    log_info \"Verifying archive integrity...\"\n\n    local expected=$(awk 'NF>=1 {print $1; exit}' \"$checksum_file\")\n    local actual_output=$(\"\\${SHA256_CMD[@]}\" \"$archive_file\")\n    local actual=\\${actual_output%% *}\n\n    if [ -z \"$expected\" ]; then\n        log_warning \"Checksum file empty; skipping verification\"\n        return 0\n    fi\n\n    if [ \"$expected\" != \"$actual\" ]; then\n        log_error \"Checksum verification failed\"\n        log_verbose \"Expected: $expected\"\n        log_verbose \"Actual:   $actual\"\n        exit 1\n    fi\n\n    log_success \"Checksum verified\"\n}\n\nprompt_yes_no() {\n    local message=\"$1\"\n\n    if [ \"$NONINTERACTIVE\" = \"true\" ]; then\n        return 0\n    fi\n\n    read -p \"$message [y/N]: \" -n 1 -r\n    echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n        return 0\n    fi\n    return 1\n}\n\ninstall_config_files() {\n    local extract_dir=\"$1\"\n\n    if [ \"$DRY_RUN\" = \"true\" ]; then\n        log_info \"DRY RUN: Would place configuration into $CONFIG_DIR\"\n        return 0\n    fi\n\n    local config_source=\"\"\n    if [ -d \"$extract_dir/config\" ]; then\n        config_source=\"$extract_dir/config\"\n    elif [ -d \"$extract_dir/etc/certctrl\" ]; then\n        config_source=\"$extract_dir/etc/certctrl\"\n    fi\n\n    if [ -z \"$config_source\" ]; then\n        log_verbose \"No configuration directory found in archive\"\n        return 0\n    fi\n\n    log_info \"Installing configuration to $CONFIG_DIR\"\n    if [ -d \"$CONFIG_DIR\" ] && [ -n \"$(ls -A \"$CONFIG_DIR\" 2>/dev/null)\" ] && [ \"$FORCE\" = \"false\" ]; then\n        if [ \"$NONINTERACTIVE\" = \"true\" ]; then\n            log_info \"Configuration directory exists but continuing (non-interactive mode)\"\n        else\n            log_warning \"Configuration directory $CONFIG_DIR already exists and contains files\"\n            log_info \"To overwrite: Use ?force in URL or FORCE=true with sudo -E\"\n            log_info \"Skipping configuration install\"\n            return 0\n        fi\n    fi\n    mkdir -p \"$CONFIG_DIR\"\n    cp -R \"$config_source/.\" \"$CONFIG_DIR/\"\n    log_success \"Configuration installed\"\n}\n\nensure_service_account() {\n    local account=\"$SERVICE_ACCOUNT\"\n\n    if [ \"$account\" = \"\" ] || [ \"$account\" = \"root\" ]; then\n        return 0\n    fi\n\n    if id \"$account\" &> /dev/null; then\n        return 0\n    fi\n\n    if command -v useradd &> /dev/null; then\n        log_info \"Creating service account $account\"\n        useradd --system --no-create-home --shell /usr/sbin/nologin \"$account\"\n    else\n        log_warning \"useradd not available; please ensure account $account exists\"\n    fi\n}\n\nstop_service_if_running() {\n    # Avoid ETXTBUSY when overwriting the binary while the service is running\n    if [ \"$EUID\" -ne 0 ]; then\n        return 0\n    fi\n    if ! command -v systemctl >/dev/null 2>&1; then\n        return 0\n    fi\n    if ! systemctl list-unit-files \"$SERVICE_NAME\" >/dev/null 2>&1; then\n        return 0\n    fi\n    if systemctl is-active --quiet \"$SERVICE_NAME\" 2>/dev/null; then\n        log_info \"Stopping $SERVICE_NAME before upgrading binary\"\n        if systemctl stop \"$SERVICE_NAME\"; then\n            RESTART_SERVICE_AFTER_INSTALL=\"true\"\n        else\n            log_warning \"Failed to stop $SERVICE_NAME; continuing with installation\"\n        fi\n    fi\n}\n\ncreate_systemd_unit() {\n    cat > \"/etc/systemd/system/$SERVICE_NAME\" << 'EOF'\n[Unit]\nDescription=@@DESCRIPTION@@\nAfter=network-online.target\nWants=network-online.target\nStartLimitIntervalSec=0\n\n[Service]\nType=simple\nRestart=always\nRestartSec=5\nUser=@@SERVICE_USER@@\nGroup=@@SERVICE_USER@@\nWorkingDirectory=@@CONFIG_DIR@@\nStateDirectory=@@STATE_DIR_NAME@@\nExecStart=@@BINARY_PATH@@ --config-dirs @@CONFIG_DIR@@ --keep-running\nStandardOutput=journal\nStandardError=journal\nSyslogIdentifier=cert-ctrl\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=@@CONFIG_DIR@@\nReadWritePaths=@@STATE_DIR@@\n\n[Install]\nWantedBy=multi-user.target\nEOF\n}\n\ninstall_service_unit() {\n\n    if [ \"$INSTALL_SERVICE\" != \"true\" ]; then\n        log_verbose \"Service installation disabled\"\n        return 0\n    fi\n\n    if [ \"$DRY_RUN\" = \"true\" ]; then\n        log_info \"DRY RUN: Would install systemd unit $SERVICE_NAME\"\n        return 0\n    fi\n\n    if [ \"$EUID\" -ne 0 ]; then\n        log_warning \"Service installation requires root privileges (skipping service setup)\"\n        log_info \"To install service manually after installation:\"\n        log_info \"  sudo systemctl enable --now $SERVICE_NAME\"\n        return 0\n    fi\n\n    if ! command -v systemctl &> /dev/null; then\n        log_warning \"systemctl not available; skipping service installation\"\n        return 0\n    fi\n\n    ensure_service_account\n\n    log_info \"Installing systemd unit at /etc/systemd/system/$SERVICE_NAME\"\n    if [ -f \"/etc/systemd/system/$SERVICE_NAME\" ] && [ \"$FORCE\" = \"false\" ]; then\n        if [ \"$NONINTERACTIVE\" = \"true\" ]; then\n            log_info \"Overwriting existing service unit (non-interactive mode)\"\n        else\n            log_warning \"Service $SERVICE_NAME already exists.\"\n            log_info \"To overwrite: Use ?force in URL or FORCE=true with sudo -E\"\n            log_info \"Skipping service installation\"\n            return 0\n        fi\n    fi\n\n    create_systemd_unit\n\n    # Substitute placeholders in the service file\n    sed -i \"s|@@BINARY_PATH@@|$INSTALL_DIR/cert-ctrl|g\" \"/etc/systemd/system/$SERVICE_NAME\"\n    sed -i \"s|@@CONFIG_DIR@@|$CONFIG_DIR|g\" \"/etc/systemd/system/$SERVICE_NAME\"\n    sed -i \"s|@@SERVICE_USER@@|$SERVICE_ACCOUNT|g\" \"/etc/systemd/system/$SERVICE_NAME\"\n    sed -i \"s|@@DESCRIPTION@@|$SERVICE_DESCRIPTION|g\" \"/etc/systemd/system/$SERVICE_NAME\"\n    sed -i \"s|@@STATE_DIR_NAME@@|$STATE_DIR_NAME|g\" \"/etc/systemd/system/$SERVICE_NAME\"\n    sed -i \"s|@@STATE_DIR@@|$STATE_DIR|g\" \"/etc/systemd/system/$SERVICE_NAME\"\n\n    # Ensure config directory exists and has proper permissions\n    if [ ! -d \"$CONFIG_DIR\" ]; then\n        log_info \"Creating config directory $CONFIG_DIR\"\n        mkdir -p \"$CONFIG_DIR\"\n    fi\n    if [ ! -d \"$STATE_DIR\" ]; then\n        log_info \"Creating state directory $STATE_DIR\"\n        mkdir -p \"$STATE_DIR\"\n    fi\n    chown -R \"$SERVICE_ACCOUNT:$SERVICE_ACCOUNT\" \"$CONFIG_DIR\" 2>/dev/null || true\n    chmod 755 \"$CONFIG_DIR\"\n    chown -R \"$SERVICE_ACCOUNT:$SERVICE_ACCOUNT\" \"$STATE_DIR\" 2>/dev/null || true\n    chmod 755 \"$STATE_DIR\"\n\n    systemctl daemon-reload\n    log_success \"Systemd unit installed successfully\"\n\n    if [ \"$ENABLE_SERVICE\" = \"true\" ]; then\n        log_info \"Enabling and starting $SERVICE_NAME\"\n        if systemctl enable --now \"$SERVICE_NAME\"; then\n            log_success \"Service $SERVICE_NAME started successfully\"\n        else\n            log_warning \"Service installation completed but failed to start\"\n            log_info \"Check logs with: journalctl -u $SERVICE_NAME\"\n            log_info \"Start manually with: systemctl start $SERVICE_NAME\"\n        fi\n    else\n        log_info \"Service installed. Enable manually with: systemctl enable --now $SERVICE_NAME\"\n    fi\n}\n\n# Install binary\ninstall_binary() {\n    local temp_file=\"$1\"\n    local platform_arch=\"$2\"\n    \n    if [ \"$DRY_RUN\" = \"true\" ]; then\n        log_info \"DRY RUN: Would install to $INSTALL_DIR\"\n        if [ \"$INSTALL_SERVICE\" = \"true\" ]; then\n            log_info \"DRY RUN: Would install systemd unit $SERVICE_NAME\"\n        fi\n        return 0\n    fi\n    \n    mkdir -p \"$INSTALL_DIR\"\n    \n    log_info \"Installing to $INSTALL_DIR...\"\n    \n    # Extract\n    local extract_dir=$(mktemp -d)\n    if ! tar -xzf \"$temp_file\" -C \"$extract_dir\"; then\n        log_error \"Failed to extract downloaded file\"\n        rm -rf \"$extract_dir\"\n        exit 1\n    fi\n    \n    # Find binary\n    local binary_path=\"\"\n    if [ -f \"$extract_dir/cert-ctrl\" ]; then\n        binary_path=\"$extract_dir/cert-ctrl\"\n    elif [ -f \"$extract_dir/bin/cert-ctrl\" ]; then\n        binary_path=\"$extract_dir/bin/cert-ctrl\"\n    else\n        log_error \"cert-ctrl binary not found in archive\"\n        rm -rf \"$extract_dir\"\n        exit 1\n    fi\n    \n    # Check existing installation\n    if [ -f \"$INSTALL_DIR/cert-ctrl\" ] && [ \"$FORCE\" = \"false\" ]; then\n        local current_version=\"\"\n        if [ -x \"$INSTALL_DIR/cert-ctrl\" ]; then\n            current_version=$(\"$INSTALL_DIR/cert-ctrl\" --version 2>/dev/null || echo \"unknown\")\n        fi\n        \n        log_warning \"cert-ctrl is already installed at $INSTALL_DIR/cert-ctrl\"\n        if [ -n \"$current_version\" ]; then\n            log_info \"Current version: $current_version\"\n            log_info \"New version: $VERSION\"\n        fi\n        log_info \"\"\n        log_info \"To proceed with installation, choose one of:\"\n        log_info \"  1. URL parameter:   curl -fsSL \\\"https://install.lets-script.com/install.sh?force\\\" | sudo bash\"\n        log_info \"  2. Environment var: FORCE=true curl -fsSL https://install.lets-script.com/install.sh | sudo -E bash\"\n        log_info \"  3. Remove existing: sudo rm $INSTALL_DIR/cert-ctrl && curl -fsSL https://install.lets-script.com/install.sh | sudo bash\"\n        log_info \"\"\n        log_error \"Installation stopped. Use one of the options above to continue.\"\n        rm -rf \"$extract_dir\"\n        exit 1\n    fi\n    \n    # Install\n    stop_service_if_running\n    chmod +x \"$binary_path\"\n    cp \"$binary_path\" \"$INSTALL_DIR/cert-ctrl\"\n    log_success \"Binary installed\"\n\n    install_config_files \"$extract_dir\"\n    install_service_unit\n\n    if [ \"$RESTART_SERVICE_AFTER_INSTALL\" = \"true\" ]; then\n        if [ \"$EUID\" -ne 0 ] || ! command -v systemctl >/dev/null 2>&1; then\n            log_warning \"Service $SERVICE_NAME was stopped but could not be restarted automatically\"\n        else\n            log_info \"Restarting $SERVICE_NAME after upgrade\"\n            if systemctl start \"$SERVICE_NAME\"; then\n                log_success \"Service $SERVICE_NAME restarted\"\n            else\n                log_warning \"Failed to restart $SERVICE_NAME; start manually with: systemctl start $SERVICE_NAME\"\n            fi\n        fi\n    fi\n\n    rm -rf \"$extract_dir\"\n\n    log_success \"cert-ctrl installed successfully!\"\n}\n\n# Setup PATH\nsetup_path() {\n    # System installation - /usr/local/bin should already be in PATH\n    return 0\n}\n\n# Verify installation\nverify_installation() {\n    local binary_path=\"$INSTALL_DIR/cert-ctrl\"\n    \n    if [ ! -f \"$binary_path\" ]; then\n        log_error \"Installation failed: binary not found\"\n        exit 1\n    fi\n    \n    if \"$binary_path\" --version &>/dev/null; then\n        local version=$(\"$binary_path\" --version 2>/dev/null | head -n1)\n        log_success \"Installation verified! Version: $version\"\n        return 0\n    else\n        log_warning \"Binary installed but version check failed\"\n        \n        # Try to run the binary and show error output\n        echo \"\"\n        log_info \"Trying to diagnose the issue...\"\n        local error_output\n        error_output=$(\"$binary_path\" 2>&1 || true)\n        \n        # Check if it's a glibc version issue\n        if echo \"$error_output\" | grep -q \"GLIBC_\"; then\n            log_error \"Your system is missing required glibc versions!\"\n            echo \"\"\n            \n            # Show current glibc version\n            local current_glibc=\"\"\n            if [ -f /lib/x86_64-linux-gnu/libc.so.6 ]; then\n                current_glibc=$(/lib/x86_64-linux-gnu/libc.so.6 2>&1 | grep -o \"release version [0-9]*\\.[0-9]*\" | awk '{print $NF}')\n            fi\n            \n            if [ -z \"$current_glibc\" ] && command -v ldd &>/dev/null; then\n                current_glibc=$(ldd --version 2>&1 | head -1 | grep -oE '[0-9]+\\.[0-9]+' | head -1)\n            fi\n            \n            if [ -n \"$current_glibc\" ]; then\n                log_warning \"Your system has: glibc $current_glibc\"\n            else\n                log_warning \"Unable to detect your current glibc version\"\n            fi\n            \n            # Extract and show required versions\n            local required_versions\n            required_versions=$(echo \"$error_output\" | grep -o \"GLIBC_[0-9.]*\" | sort -u | tr '\\n' ' ')\n            log_warning \"Required versions: $required_versions\"\n            \n            echo \"\"\n            \n            # Detect OS and provide specific advice\n            if [ -f /etc/os-release ]; then\n                local os_id=$(grep \"^ID=\" /etc/os-release | cut -d'=' -f2 | tr -d '\"')\n                local version_id=$(grep \"^VERSION_ID=\" /etc/os-release | cut -d'=' -f2 | tr -d '\"')\n                \n                log_info \"Your system: $os_id $version_id\"\n                echo \"\"\n                \n                case \"$os_id\" in\n                    ubuntu)\n                        case \"$version_id\" in\n                            \"24.04\"|\"23.10\"|\"23.04\")\n                                log_success \"Ubuntu $version_id has compatible glibc - update your packages:\"\n                                echo \"  sudo apt update && sudo apt full-upgrade -y\"\n                                ;;\n                            \"22.04\"|\"20.04\")\n                                log_error \"Ubuntu $version_id is not supported - glibc is too old.\"\n                                echo \"\"\n                                log_warning \"cert-ctrl requires glibc 2.36+ but Ubuntu $version_id only has glibc 2.35.\"\n                                echo \"\"\n                                log_info \"ONLY SOLUTION: Upgrade to Ubuntu 24.04 LTS\"\n                                echo \"  sudo do-release-upgrade\"\n                                echo \"\"\n                                log_info \"Alternative: Use Docker instead\"\n                                echo \"  docker run -it cert-ctrl --version\"\n                                ;;\n                            *)\n                                log_info \"Try updating your Ubuntu packages:\"\n                                echo \"  sudo apt update && sudo apt full-upgrade -y\"\n                                ;;\n                        esac\n                        ;;\n                    debian)\n                        log_info \"For Debian $version_id, try:\"\n                        echo \"  sudo apt update && sudo apt full-upgrade -y\"\n                        ;;\n                    rhel|centos|rocky|almalinux|fedora)\n                        log_info \"For RHEL/CentOS/Rocky/Fedora, update packages:\"\n                        echo \"  sudo dnf update -y\"\n                        ;;\n                    *)\n                        log_info \"Try updating your system packages:\"\n                        echo \"  sudo apt update && sudo apt upgrade -y  # Debian-based\"\n                        echo \"  sudo dnf update -y                    # RHEL-based\"\n                        ;;\n                esac\n            fi\n            \n            echo \"\"\n            log_info \"Alternative options:\"\n            echo \"  1. Use Docker: docker run cert-ctrl --version\"\n            echo \"  2. Build from source on your system\"\n            echo \"  3. Use a container with compatible glibc\"\n        else\n            log_error \"Binary failed to run:\"\n            echo \"$error_output\"\n        fi\n        \n        echo \"\"\n        log_error \"Installation incomplete due to runtime dependencies.\"\n        return 1\n    fi\n}\n\n# Main function\nmain() {\n    log_info \"Starting cert-ctrl installation...\"\n    log_verbose \"Service URL: $BASE_URL\"\n    log_verbose \"Mirror: $MIRROR_URL\"\n    log_verbose \"Install directory: $INSTALL_DIR\"\n    log_verbose \"Config directory: $CONFIG_DIR\"\n    log_verbose \"Service install: $INSTALL_SERVICE (enable=$ENABLE_SERVICE)\"\n    \n    check_dependencies\n    \n    local platform_arch=$(detect_platform)\n    log_verbose \"Platform: $platform_arch\"\n    \n    resolve_version\n    \n    if [ ! -w \"$(dirname \"$INSTALL_DIR\")\" ] && [ \"$EUID\" -ne 0 ]; then\n        log_error \"Installation requires root privileges\"\n        exit 1\n    fi\n    \n    local temp_file=$(download_binary \"$platform_arch\")\n\n    if [ \"$DRY_RUN\" = \"true\" ]; then\n        log_info \"DRY RUN: No changes were made\"\n        return 0\n    fi\n\n    if [ -z \"$temp_file\" ]; then\n        log_error \"Download failed\"\n        exit 1\n    fi\n\n    local checksum_file=$(download_checksum \"$platform_arch\")\n    verify_checksum \"$temp_file\" \"$checksum_file\"\n    \n    install_binary \"$temp_file\" \"$platform_arch\"\n    \n    rm -f \"$temp_file\"\n    if [ -n \"$checksum_file\" ]; then\n        rm -f \"$checksum_file\"\n    fi\n    \n    setup_path\n    verify_installation\n    \n    echo\n    log_success \"cert-ctrl installation completed!\"\n    echo\n    echo \"Next steps:\"\n    echo \"  - Run: cert-ctrl --help\"\n    if [ \"$INSTALL_SERVICE\" = \"true\" ]; then\n        if [ \"$ENABLE_SERVICE\" = \"true\" ]; then\n            echo \"  - Check service status: systemctl status $SERVICE_NAME\"\n        else\n            echo \"  - Enable service when ready: sudo systemctl enable --now $SERVICE_NAME\"\n        fi\n    fi\n    echo\n}\n\n# Parse command line arguments\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        --version)\n            VERSION=\"$2\"\n            shift 2\n            ;;\n        --install-dir|--dir)\n            INSTALL_DIR=\"$2\"\n            shift 2\n            ;;\n        --config-dir)\n            CONFIG_DIR=\"$2\"\n            shift 2\n            ;;\n        --service)\n            INSTALL_SERVICE=\"true\"\n            ENABLE_SERVICE=\"true\"\n            shift\n            ;;\n        --no-service)\n            INSTALL_SERVICE=\"false\"\n            ENABLE_SERVICE=\"false\"\n            shift\n            ;;\n        --enable-service)\n            ENABLE_SERVICE=\"true\"\n            shift\n            ;;\n        --no-enable)\n            ENABLE_SERVICE=\"false\"\n            shift\n            ;;\n        --non-interactive|--yes|-y)\n            NONINTERACTIVE=\"true\"\n            FORCE=true\n            shift\n            ;;\n        --channel)\n            CHANNEL=\"$2\"\n            shift 2\n            ;;\n        --force)\n            FORCE=true\n            shift\n            ;;\n        --verbose|-v)\n            VERBOSE=true\n            shift\n            ;;\n        --dry-run)\n            DRY_RUN=true\n            shift\n            ;;\n        --help|-h)\n            echo \"cert-ctrl installation script\"\n            echo \"Usage: $0 [options]\"\n            echo \"\"\n            echo \"Options:\"\n            echo \"  --user-install    Install to user directory\"\n            echo \"  --version VER     Install specific version\"\n            echo \"  --install-dir DIR Custom install directory\"\n            echo \"  --config-dir DIR  Override configuration directory\"\n            echo \"  --force           Overwrite existing installation\"\n            echo \"  --service         Install and enable systemd service\"\n            echo \"  --no-service      Skip systemd service installation\"\n            echo \"  --enable-service  Enable service after install\"\n            echo \"  --no-enable       Install service but do not enable\"\n            echo \"  --non-interactive Run without prompts (assumes yes)\"\n            echo \"  --verbose         Enable verbose output\"\n            echo \"  --dry-run         Show what would be done\"\n            echo \"  --help            Show this help\"\n            exit 0\n            ;;\n        *)\n            log_error \"Unknown option: $1\"\n            exit 1\n            ;;\n    esac\ndone\n\nif [ -z \"$CONFIG_DIR\" ]; then\n    CONFIG_DIR=\"/etc/certctrl\"\nfi\n\nif [ -z \"$INSTALL_SERVICE\" ]; then\n    INSTALL_SERVICE=\"true\"\nfi\n\nif [ -z \"$ENABLE_SERVICE\" ]; then\n    ENABLE_SERVICE=\"$INSTALL_SERVICE\"\nfi\n\nif [ -z \"$FORCE\" ]; then\n    FORCE=\"false\"\nfi\n\nif [ -z \"$DRY_RUN\" ]; then\n    DRY_RUN=\"false\"\nfi\n\nif [ -z \"$VERBOSE\" ]; then\n    VERBOSE=\"false\"\nfi\n\n# Run installation\nmain\n`;\n", "export const powershellTemplate = `# cert-ctrl installation script (PowerShell)\n# Generated by: {{BASE_URL}}\n# Mirror: {{MIRROR_NAME}}\n# Version: {{VERSION}}\n# Platform: windows-{{ARCHITECTURE}}\n\nparam(\n    [switch]$UserInstall,\n    [string]$Version = \"{{VERSION}}\",\n    [string]$InstallDir,\n    [switch]$Verbose,\n    [switch]$Force,\n    [switch]$DryRun\n)\n\n$ErrorActionPreference = 'Stop'\nSet-StrictMode -Version Latest\n\nfunction Get-SystemArchitecture {\n    try {\n        $runtimeType = [System.Runtime.InteropServices.RuntimeInformation]\n        $property = $runtimeType.GetProperty('OSArchitecture')\n        if ($property) {\n            $value = $property.GetValue($null)\n            if ($value) {\n                return $value.ToString()\n            }\n        }\n    }\n    catch {\n        # Ignore and try alternate mechanisms\n    }\n\n    try {\n        $os = Get-CimInstance Win32_OperatingSystem -ErrorAction Stop\n        if ($os.OSArchitecture) {\n            return $os.OSArchitecture\n        }\n    }\n    catch {\n        try {\n            $os = Get-WmiObject Win32_OperatingSystem -ErrorAction Stop\n            if ($os.OSArchitecture) {\n                return $os.OSArchitecture\n            }\n        }\n        catch {\n            # Fall through\n        }\n    }\n\n    if ([Environment]::Is64BitOperatingSystem) {\n        return 'x64'\n    }\n\n    return 'x86'\n}\n\nfunction Write-Info($Message) {\n    Write-Host \"[INFO] $Message\"\n}\n\nfunction Write-Success($Message) {\n    Write-Host \"[SUCCESS] $Message\" -ForegroundColor Green\n}\n\nfunction Write-WarningMessage($Message) {\n    Write-Warning $Message\n}\n\nfunction Write-ErrorMessage($Message) {\n    Write-Error $Message\n}\n\nfunction Test-Administrator {\n    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()\n    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)\n    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)\n}\n\n$serviceName = \"CertCtrlAgent\"\n$serviceDisplayName = \"Cert Ctrl Agent\"\n$serviceDescription = \"Maintains device certificates and polls the cert-ctrl control plane.\"\n$serviceArgs = \"--keep-running\"\n\nfunction Register-CertCtrlService {\n    param(\n        [string]$BinaryPath,\n        [bool]$IsUserInstall,\n        [bool]$ForceInstall\n    )\n\n    if ($IsUserInstall) {\n        Write-Info \"User install selected; skipping Windows service registration.\"\n        return $false\n    }\n\n    if (-not (Test-Administrator)) {\n        Write-WarningMessage \"Administrator privileges are required to register the Windows service. Skipping.\"\n        return $false\n    }\n\n    $imagePath = '\"' + $BinaryPath + '\" ' + $serviceArgs\n\n    try {\n        $existing = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n        if ($existing) {\n            if (-not $ForceInstall) {\n                Write-Info \"Windows service '$serviceName' already exists. Use -Force to recreate it.\"\n                if ($existing.Status -ne 'Running') {\n                    Start-Service -Name $serviceName -ErrorAction SilentlyContinue\n                }\n                return $true\n            }\n\n            if ($existing.Status -eq 'Running') {\n                Stop-Service -Name $serviceName -Force -ErrorAction SilentlyContinue\n            }\n            sc.exe delete $serviceName | Out-Null\n            Start-Sleep -Seconds 2\n            while (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {\n                Start-Sleep -Milliseconds 200\n            }\n        }\n\n        New-Service -Name $serviceName -BinaryPathName $imagePath -DisplayName $serviceDisplayName -Description $serviceDescription -StartupType Automatic -ErrorAction Stop\n        Start-Service -Name $serviceName -ErrorAction SilentlyContinue\n        Write-Success \"Windows service '$serviceName' registered.\"\n        return $true\n    }\n    catch {\n        Write-WarningMessage \"Failed to configure Windows service '$serviceName': $($_.Exception.Message)\"\n        return $false\n    }\n}\n\n$archSlug = \"{{ARCHITECTURE}}\"\nif ([string]::IsNullOrWhiteSpace($archSlug)) {\n    $archSlug = \"x64\"\n}\n\n$systemArchitecture = Get-SystemArchitecture\nswitch -regex ($systemArchitecture) {\n    'arm64|aarch64' { $archSlug = 'arm64'; break }\n    'arm' { $archSlug = 'arm'; break }\n    'x86|x64|amd64|86|64' { $archSlug = 'x64'; break }\n    default { $archSlug = 'x64' }\n}\n\n$paramUserInstall = $false\nif ($PSBoundParameters.ContainsKey('UserInstall') -and $UserInstall.IsPresent) {\n    $paramUserInstall = $true\n}\n\n$paramForceInstall = ([bool]$Force) -or (\"{{FORCE}}\" -eq \"true\")\n\n\n$installPath = if ($InstallDir) {\n    $InstallDir\n} else {\n    if ($paramUserInstall) {\n        Join-Path $env:LOCALAPPDATA \"Programs\\\\cert-ctrl\"\n    } else {\n        \"C:\\\\Program Files\\\\cert-ctrl\"\n    }\n}\n\nif ($paramUserInstall -and -not (Test-Administrator)) {\n    Write-Info \"User-mode installation selected; administrator rights are not required.\"\n}\n\n$mirrorUrl = \"{{MIRROR_URL}}\"\nif ($mirrorUrl -eq \"{{BASE_URL}}/releases/proxy\") {\n    $packageUrl = \"$mirrorUrl/$Version/cert-ctrl-windows-$archSlug.zip\"\n} else {\n    $packageUrl = \"$mirrorUrl/{{GITHUB_REPO_OWNER}}/{{GITHUB_REPO_NAME}}/releases/download/$Version/cert-ctrl-windows-$archSlug.zip\"\n}\n\n$tempDir = New-Item -ItemType Directory -Path ([System.IO.Path]::GetTempPath()) -Name (\"cert-ctrl-\" + [System.Guid]::NewGuid().ToString())\n$zipPath = Join-Path $tempDir \"cert-ctrl.zip\"\n\nWrite-Info \"Downloading cert-ctrl $Version...\"\nInvoke-WebRequest -Uri $packageUrl -OutFile $zipPath -UseBasicParsing\n\nif ($DryRun -or (\"{{DRY_RUN}}\" -eq \"true\")) {\n    Write-Info \"DRY RUN: Installation files prepared at $tempDir\"\n    exit 0\n}\n\nExpand-Archive -Path $zipPath -DestinationPath $tempDir -Force\n\nNew-Item -ItemType Directory -Force -Path $installPath | Out-Null\n\n$binaryPath = Join-Path $tempDir 'cert-ctrl.exe'\nif (-not (Test-Path $binaryPath)) {\n    $binaryPath = Join-Path $tempDir 'bin\\\\cert-ctrl.exe'\n}\n\nif (-not (Test-Path $binaryPath)) {\n    Write-ErrorMessage \"cert-ctrl executable not found in downloaded archive\"\n    exit 1\n}\n\n$destinationBinary = Join-Path $installPath 'cert-ctrl.exe'\nCopy-Item -Path $binaryPath -Destination $destinationBinary -Force\n$serviceInstalled = Register-CertCtrlService -BinaryPath $destinationBinary -IsUserInstall:$paramUserInstall -ForceInstall:$paramForceInstall\n\nWrite-Success \"cert-ctrl installed at $destinationBinary\"\nWrite-Info \"Binary directory: $installPath\"\n$normalizedInstallPath = $installPath.TrimEnd('\\\\')\n$pathEntries = $env:PATH -split ';'\n$pathPresent = $pathEntries | Where-Object { $_.TrimEnd('\\\\') -ieq $normalizedInstallPath }\nif (-not $pathPresent) {\n    $originalPath = $env:PATH\n    if (-not ($env:PATH -like \"*$normalizedInstallPath*\")) {\n        $env:PATH = ($originalPath.TrimEnd(';')) + ';' + $installPath\n        Write-Info \"Added $installPath to PATH for this PowerShell session.\"\n        Write-Info \"Verify now with: where.exe cert-ctrl\"\n    }\n\n    $userPath = [Environment]::GetEnvironmentVariable(\"PATH\", [EnvironmentVariableTarget]::User)\n    if ([string]::IsNullOrWhiteSpace($userPath)) {\n        $userPath = $originalPath\n    }\n    $userEntries = $userPath -split ';'\n    $userHasPath = $userEntries | Where-Object { $_.TrimEnd('\\\\') -ieq $normalizedInstallPath }\n    if (-not $userHasPath) {\n        $newUserPath = if ([string]::IsNullOrWhiteSpace($userPath)) {\n            $installPath\n        } else {\n            ($userPath.TrimEnd(';')) + ';' + $installPath\n        }\n        [Environment]::SetEnvironmentVariable(\"PATH\", $newUserPath, [EnvironmentVariableTarget]::User)\n        Write-Info \"Persisted install directory to current user's PATH.\"\n    }\n\n    if (Test-Administrator) {\n        $machinePath = [Environment]::GetEnvironmentVariable(\"PATH\", [EnvironmentVariableTarget]::Machine)\n        if ([string]::IsNullOrWhiteSpace($machinePath)) {\n            $machinePath = $originalPath\n        }\n        $machineEntries = $machinePath -split ';'\n        $machineHasPath = $machineEntries | Where-Object { $_.TrimEnd('\\\\') -ieq $normalizedInstallPath }\n        if (-not $machineHasPath) {\n            $newMachinePath = if ([string]::IsNullOrWhiteSpace($machinePath)) {\n                $installPath\n            } else {\n                ($machinePath.TrimEnd(';')) + ';' + $installPath\n            }\n            [Environment]::SetEnvironmentVariable(\"PATH\", $newMachinePath, [EnvironmentVariableTarget]::Machine)\n            Write-Info \"Persisted install directory to machine PATH.\"\n        }\n    } else {\n        Write-Info \"Re-open PowerShell to use cert-ctrl without specifying the full path.\"\n    }\n}\nif ($serviceInstalled) {\n    Write-Info \"Windows service '$serviceName' is running.\"\n} elseif (-not $paramUserInstall) {\n    $manualCommand = \"sc create $serviceName binPath=\\\"\" + $destinationBinary + \"\\\" \" + $serviceArgs\n    Write-Info \"Register later as a service with: $manualCommand\"\n}\n$statusCommand = 'Get-Service ' + $serviceName\nWrite-Info \"Service status: $statusCommand\"\n`;\n", "export const macosTemplate = `#!/bin/bash\n# cert-ctrl macOS installation script for system-wide launchd service\n\nset -euo pipefail\n\nif [[ \\${EUID:-$(id -u)} -ne 0 ]]; then\n    echo \"[ERROR] Run this installer with sudo or as root.\" >&2\n    exit 1\nfi\n\nREPO_OWNER=\"{{GITHUB_REPO_OWNER}}\"\nREPO_NAME=\"{{GITHUB_REPO_NAME}}\"\nVERSION=\"{{VERSION}}\"\nBASE_URL=\"{{BASE_URL}}\"\nMIRROR_URL=\"{{MIRROR_URL}}\"\nINSTALL_DIR=\"\\${INSTALL_DIR:-{{INSTALL_DIR}}}\"\nif [ -z \"$INSTALL_DIR\" ]; then\n    INSTALL_DIR=\"/usr/local/bin\"\nfi\nCONFIG_DIR=\"\\${CONFIG_DIR:-{{CONFIG_DIR}}}\"\nSTATE_DIR=\"\\${STATE_DIR:-{{STATE_DIR}}}\"\nLOG_DIR=\"\\${LOG_DIR:-/var/log}\"\nSERVICE_LABEL=\"\\${SERVICE_LABEL:-{{SERVICE_LABEL}}}\"\nPLIST_PATH=\"/Library/LaunchDaemons/\\${SERVICE_LABEL}.plist\"\nDOWNLOAD_OS=\"macos\"\nRED='\\x1b[0;31m'\nGREEN='\\x1b[0;32m'\nBLUE='\\x1b[0;34m'\nYELLOW='\\x1b[1;33m'\nNC='\\x1b[0m'\nSHA256_CMD=()\nARCHIVE_TMPDIR=\"\"\n\ndie() {\n    echo -e \"\\${RED}[ERROR]\\${NC} $1\" >&2\n    exit 1\n}\n\nlog_info() {\n    echo -e \"\\${BLUE}[INFO]\\${NC} $1\" >&2\n}\n\nlog_success() {\n    echo -e \"\\${GREEN}[SUCCESS]\\${NC} $1\" >&2\n}\n\nlog_warn() {\n    echo -e \"\\${YELLOW}[WARNING]\\${NC} $1\" >&2\n}\n\ncheck_dependencies() {\n    local deps=(\"curl\" \"tar\" \"gzip\")\n    for dep in \"\\${deps[@]}\"; do\n        command -v \"$dep\" >/dev/null 2>&1 || die \"Required dependency '$dep' is not installed.\"\n    done\n\n    if command -v sha256sum >/dev/null 2>&1; then\n        SHA256_CMD=(sha256sum)\n    elif command -v shasum >/dev/null 2>&1; then\n        SHA256_CMD=(shasum -a 256)\n    else\n        die \"Install coreutils (brew install coreutils) to obtain sha256sum or shasum.\"\n    fi\n}\n\ndetect_arch() {\n    case \"$(uname -m)\" in\n        arm64) echo \"arm64\" ;;\n        x86_64) echo \"x64\" ;;\n        *) die \"Unsupported architecture $(uname -m)\" ;;\n    esac\n}\n\nresolve_version() {\n    if [[ \"$VERSION\" != \"latest\" ]]; then\n        echo \"$VERSION\"\n        return\n    fi\n\n    local api=\"https://api.github.com/repos/\\${REPO_OWNER}/\\${REPO_NAME}/releases/latest\"\n    if command -v jq >/dev/null 2>&1; then\n        curl -fsSL \"$api\" | jq -r '.tag_name' || die \"Failed to resolve latest version via GitHub API.\"\n    else\n        curl -fsSL \"$api\" | grep '\"tag_name\"' | head -1 | sed -E 's/.*\"tag_name\": \"([^\"]+)\".*/\\\\1/' || die \"Failed to parse latest version.\"\n    fi\n}\n\ndownload_archive() {\n    local version=\"$1\"\n    local arch=\"$2\"\n    local temp_dir\n    temp_dir=$(mktemp -d)\n    ARCHIVE_TMPDIR=\"$temp_dir\"\n    local archive=\"\\${temp_dir}/cert-ctrl.tar.gz\"\n    local checksum=\"\\${archive}.sha256\"\n    local tarball=\"cert-ctrl-\\${DOWNLOAD_OS}-\\${arch}.tar.gz\"\n    local base_url=\"\"\n\n    if [ \"$MIRROR_URL\" = \"$BASE_URL/releases/proxy\" ]; then\n        base_url=\"$MIRROR_URL/$version\"\n    else\n        base_url=\"$MIRROR_URL/\\${REPO_OWNER}/\\${REPO_NAME}/releases/download/$version\"\n    fi\n\n    log_info \"Downloading \\${tarball} ($version)\"\n    curl -fsSL \"\\${base_url}/\\${tarball}\" -o \"$archive\" || die \"Failed to download archive.\"\n\n    log_info \"Downloading checksum\"\n    if curl -fsSL \"\\${base_url}/\\${tarball}.sha256\" -o \"$checksum\"; then\n        local expected\n        expected=$(awk 'NF>=1 {print $1; exit}' \"$checksum\")\n        local actual_output\n        actual_output=$(\"\\${SHA256_CMD[@]}\" \"$archive\")\n        local actual=\\${actual_output%% *}\n        [[ -z \"$expected\" ]] && die \"Checksum file is empty.\"\n        if [[ \"$expected\" != \"$actual\" ]]; then\n            die \"Checksum mismatch (expected $expected, got $actual).\"\n        fi\n        log_success \"Checksum verified.\"\n    else\n        log_warn \"Checksum file unavailable; skipping verification.\"\n    fi\n\n    echo \"$archive\"\n}\n\ninstall_binary() {\n    local archive=\"$1\"\n    local temp_extract\n    temp_extract=$(mktemp -d)\n    tar -xzf \"$archive\" -C \"$temp_extract\" || die \"Failed to extract archive.\"\n\n    local binary_path\n    if [[ -f \"\\${temp_extract}/cert-ctrl\" ]]; then\n        binary_path=\"\\${temp_extract}/cert-ctrl\"\n    elif [[ -f \"\\${temp_extract}/bin/cert-ctrl\" ]]; then\n        binary_path=\"\\${temp_extract}/bin/cert-ctrl\"\n    else\n        die \"cert-ctrl binary not found inside archive.\"\n    fi\n\n    mkdir -p \"$INSTALL_DIR\"\n    install -m 755 \"$binary_path\" \"\\${INSTALL_DIR}/cert-ctrl\"\n    log_success \"Installed cert-ctrl to \\${INSTALL_DIR}.\"\n}\n\nprepare_directories() {\n    mkdir -p \"$CONFIG_DIR\"\n    mkdir -p \"$STATE_DIR\"\n    chmod 755 \"$CONFIG_DIR\" \"$STATE_DIR\"\n    log_info \"Configuration directory: $CONFIG_DIR\"\n    log_info \"State directory: $STATE_DIR\"\n\n    mkdir -p \"$LOG_DIR\"\n    : > \"\\${LOG_DIR}/certctrl.log\"\n    : > \"\\${LOG_DIR}/certctrl.err.log\"\n    chmod 644 \"\\${LOG_DIR}/certctrl.log\" \"\\${LOG_DIR}/certctrl.err.log\"\n}\n\nwrite_launchd_plist() {\n    cat > \"$PLIST_PATH\" <<EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>\\${SERVICE_LABEL}</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>\\${INSTALL_DIR}/cert-ctrl</string>\n        <string>--config-dirs</string>\n        <string>\\${CONFIG_DIR}</string>\n        <string>--keep-running</string>\n    </array>\n    <key>EnvironmentVariables</key>\n    <dict>\n        <key>CERTCTRL_STATE_DIR</key>\n        <string>\\${STATE_DIR}</string>\n    </dict>\n    <key>WorkingDirectory</key>\n    <string>\\${CONFIG_DIR}</string>\n    <key>StandardOutPath</key>\n    <string>\\${LOG_DIR}/certctrl.log</string>\n    <key>StandardErrorPath</key>\n    <string>\\${LOG_DIR}/certctrl.err.log</string>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>KeepAlive</key>\n    <true/>\n</dict>\n</plist>\nEOF\n    chown root:wheel \"$PLIST_PATH\"\n    chmod 644 \"$PLIST_PATH\"\n    log_success \"LaunchDaemon written to \\${PLIST_PATH}.\"\n}\n\nreload_service() {\n    if launchctl list | grep -q \"\\${SERVICE_LABEL}\"; then\n        log_info \"Unloading existing service \\${SERVICE_LABEL}.\"\n        launchctl bootout system \"$PLIST_PATH\" >/dev/null 2>&1 || launchctl unload \"$PLIST_PATH\" >/dev/null 2>&1 || true\n    fi\n\n    log_info \"Loading service \\${SERVICE_LABEL}.\"\n    if launchctl bootstrap system \"$PLIST_PATH\" >/dev/null 2>&1; then\n        launchctl enable system/\\${SERVICE_LABEL} >/dev/null 2>&1 || true\n        launchctl kickstart -k system/\\${SERVICE_LABEL} >/dev/null 2>&1 || true\n    log_success \"Service \\${SERVICE_LABEL} started.\"\n    else\n        launchctl load \"$PLIST_PATH\" >/dev/null 2>&1 || die \"Failed to load LaunchDaemon.\"\n        log_warn \"Service loaded via legacy launchctl load; verify status manually.\"\n    fi\n}\n\nprint_next_steps() {\n    echo\n    log_success \"cert-ctrl installation complete.\"\n    echo \"Next steps:\" >&2\n    echo \"  - Check status: sudo launchctl print system/\\${SERVICE_LABEL}\" >&2\n    echo \"  - View logs: tail -f \\${LOG_DIR}/certctrl.log\" >&2\n    echo \"  - Stop service: sudo launchctl bootout system \\${PLIST_PATH}\" >&2\n    echo \"  - Start service: sudo launchctl bootstrap system \\${PLIST_PATH}\" >&2\n}\n\nmain() {\n    log_info \"Starting cert-ctrl macOS installation...\"\n    check_dependencies\n    local arch\n    arch=$(detect_arch)\n    local version\n    version=$(resolve_version)\n    local archive\n    archive=$(download_archive \"$version\" \"$arch\")\n    install_binary \"$archive\"\n    prepare_directories\n    write_launchd_plist\n    reload_service\n    rm -f \"$archive\" \"$archive.sha256\" 2>/dev/null || true\n    if [[ -n \"$ARCHIVE_TMPDIR\" ]]; then\n        rm -rf \"$ARCHIVE_TMPDIR\"\n    fi\n    print_next_steps\n}\n\nmain \"$@\"\n`;\n", "import { bashTemplate } from '../../templates/install.sh.js';\nimport { powershellTemplate } from '../../templates/install.ps1.js';\nimport { macosTemplate } from '../../templates/install-macos.sh.js';\n\nexport async function getInstallTemplate(scriptType, options) {\n  const {\n    platform,\n    architecture,\n    country,\n    mirror,\n    params,\n    baseUrl\n  } = options;\n\n  const defaults = {\n    configDir: '/etc/certctrl',\n    stateDir: '/var/lib/certctrl',\n    installDir: params.installDir || '',\n    serviceLabel: '',\n    logDir: '/var/log'\n  };\n\n  if (scriptType === 'macos') {\n    defaults.configDir = '/Library/Application Support/certctrl';\n    defaults.stateDir = '/Library/Application Support/certctrl/state';\n    defaults.installDir = params.installDir || '/usr/local/bin';\n    defaults.serviceLabel = 'com.coderealm.certctrl';\n    defaults.logDir = '/var/log';\n  }\n\n  // Template variables\n  const templateVars = {\n    PLATFORM: platform,\n    ARCHITECTURE: architecture,\n    COUNTRY: country,\n    MIRROR_URL: mirror.url,\n    MIRROR_NAME: mirror.name,\n    BASE_URL: baseUrl,\n    VERSION: params.version,\n    VERBOSE: params.verbose ? 'true' : 'false',\n    FORCE: params.force ? 'true' : 'false',\n    INSTALL_DIR: defaults.installDir,\n    CONFIG_DIR: defaults.configDir,\n    STATE_DIR: defaults.stateDir,\n    SERVICE_LABEL: defaults.serviceLabel,\n    LOG_DIR: defaults.logDir,\n    DRY_RUN: params.dryRun ? 'true' : 'false',\n    GITHUB_REPO_OWNER: 'coderealm-atlas',\n    GITHUB_REPO_NAME: 'cert-ctrl'\n  };\n\n  if (scriptType === 'powershell') {\n    return interpolateTemplate(powershellTemplate, templateVars);\n  } else if (scriptType === 'macos') {\n    return interpolateTemplate(macosTemplate, templateVars);\n  } else {\n    return interpolateTemplate(bashTemplate, templateVars);\n  }\n}\n\nfunction interpolateTemplate(template, vars) {\n  let result = template;\n  \n  for (const [key, value] of Object.entries(vars)) {\n    const placeholder = new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, 'g');\n    result = result.replace(placeholder, value);\n  }\n  \n  return result;\n}", "export const corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, HEAD, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\n  'Access-Control-Max-Age': '86400', // 24 hours\n};\n\nexport function handleCORS(request) {\n  return new Response(null, {\n    status: 204,\n    headers: corsHeaders\n  });\n}", "import { detectPlatform, detectArchitecture } from '../utils/platform.js';\nimport { getInstallTemplate } from '../utils/templates.js';\nimport { corsHeaders } from '../utils/cors.js';\n\nexport async function installHandler(request, env) {\n  try {\n    const url = new URL(request.url);\n    const userAgent = request.headers.get('User-Agent') || '';\n    const country = request.cf?.country || 'US';\n    const pathname = url.pathname;\n\n    // Determine script type from URL\n  let scriptType;\n  if (pathname.endsWith('.ps1')) {\n    scriptType = 'powershell';\n  } else if (pathname.endsWith('install-macos.sh')) {\n    scriptType = 'macos';\n  } else {\n    scriptType = 'bash';\n  }\n    \n    // Extract platform information\n    const platform = scriptType === 'macos'\n      ? 'macos'\n      : detectPlatform(userAgent, scriptType);\n    const architecture = detectArchitecture(userAgent);\n    \n    // Get query parameters\n    const params = {\n      version: url.searchParams.get('version') || 'latest',\n      verbose: url.searchParams.has('verbose') || url.searchParams.has('v'),\n      force: url.searchParams.has('force'),\n      installDir: url.searchParams.get('install-dir') || url.searchParams.get('dir'),\n      dryRun: url.searchParams.has('dry-run')\n    };\n\n    // Select best mirror based on location and connectivity\n    const mirror = await selectBestMirror(country, env);\n    \n    // Generate customized installation script\n    const script = await getInstallTemplate(scriptType, {\n      platform,\n      architecture,\n      country,\n      mirror,\n      params,\n      baseUrl: `https://${url.host}`\n    });\n\n    // Set appropriate content type and headers\n    const contentType = scriptType === 'powershell' \n      ? 'application/x-powershell; charset=utf-8'\n      : 'application/x-sh; charset=utf-8';\n\n    return new Response(script, {\n      headers: {\n        'Content-Type': contentType,\n        'Cache-Control': 'public, max-age=300', // 5 minutes\n        'X-Platform': platform,\n        'X-Architecture': architecture,\n        'X-Mirror': mirror.name,\n        ...corsHeaders\n      }\n    });\n\n  } catch (error) {\n    console.error('Install handler error:', error);\n    \n    return new Response('Error generating installation script', {\n      status: 500,\n      headers: {\n        'Content-Type': 'text/plain',\n        ...corsHeaders\n      }\n    });\n  }\n}\n\n// Mirror selection logic\nasync function selectBestMirror(country, env) {\n  const mirrors = {\n    proxy: {\n      name: 'cloudflare-proxy',\n      url: `https://${env.CURRENT_HOST || 'install.lets-script.com'}/releases/proxy`,\n      regions: ['all']\n    },\n    github: {\n      name: 'github-direct',\n      url: 'https://github.com',\n      regions: ['fallback']\n    }\n  };\n\n  // Always use Cloudflare proxy for all regions\n  // This ensures consistent downloads and avoids external mirror issues\n  return mirrors.proxy;\n}\n\n// A/B testing for different installation approaches\nfunction shouldUseExperimentalFeature(request, feature) {\n  const ip = request.headers.get('CF-Connecting-IP') || '';\n  const hash = simpleHash(ip + feature);\n  \n  // Use modulo to determine if user is in test group (10% of users)\n  return hash % 10 === 0;\n}\n\nfunction simpleHash(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  return Math.abs(hash);\n}\n", "const DEFAULT_USER_AGENT = 'cert-ctrl-install-service/1.0.0';\n\nexport function buildGithubHeaders(env, extraHeaders = {}) {\n  const headers = {\n    'User-Agent': DEFAULT_USER_AGENT,\n    ...extraHeaders\n  };\n\n  const token = env?.GITHUB_TOKEN;\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  return headers;\n}\n\nexport function describeGithubFailure(response, bodyText, env) {\n  let parsed;\n  let message = bodyText || '';\n  let documentationUrl;\n\n  try {\n    parsed = JSON.parse(bodyText);\n    if (parsed && typeof parsed === 'object') {\n      message = parsed.message || message;\n      documentationUrl = parsed.documentation_url || parsed.documentationUrl;\n    }\n  } catch (error) {\n    // Body was not JSON; keep original text.\n  }\n\n  const rateLimitRemaining = response.headers.get('X-RateLimit-Remaining');\n  const status = response.status;\n  const lowerMessage = (message || '').toLowerCase();\n\n  let reason = 'unknown';\n  let hint = 'Unexpected response returned by GitHub.';\n\n  if (status === 401) {\n    reason = 'unauthorized';\n    hint = 'GitHub rejected the token. Double-check that it is valid and not expired.';\n  } else if (status === 403) {\n    if (rateLimitRemaining === '0' || lowerMessage.includes('rate limit')) {\n      reason = 'rate_limit';\n      hint = 'GitHub API rate limit exceeded. Wait for the limit to reset or use a token with higher limits.';\n    } else {\n      reason = 'forbidden';\n      hint = env?.GITHUB_TOKEN\n        ? 'The GitHub token lacks sufficient permissions for this repository.'\n        : 'This repository requires authentication. Provide a GitHub token with repo read access.';\n    }\n  } else if (status === 404) {\n    reason = 'not_found';\n    hint = env?.GITHUB_TOKEN\n      ? 'Release not found or the token cannot see it. Ensure a release exists and the token has repo scope.'\n      : 'Release not found. Supply a GitHub token for private repositories or publish a release.';\n  }\n\n  return {\n    status,\n    message,\n    documentationUrl,\n    rateLimitRemaining,\n    reason,\n    hint\n  };\n}\n", "import { corsHeaders } from '../utils/cors.js';\nimport { buildGithubHeaders, describeGithubFailure } from '../utils/github.js';\n\nexport async function versionHandler(request, env) {\n  try {\n    const url = new URL(request.url);\n    const pathname = url.pathname;\n\n    if (pathname.includes('/latest')) {\n      return await handleLatestVersion(request, env);\n    } else if (pathname.includes('/check')) {\n      return await handleVersionCheck(request, env);\n    }\n\n    return new Response('Invalid version endpoint', { \n      status: 400,\n      headers: corsHeaders\n    });\n\n  } catch (error) {\n    console.error('Version handler error:', error);\n    \n    return new Response('Error processing version request', {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n}\n\nasync function handleLatestVersion(request, env) {\n  try {\n    // Check cache first\n    const cacheKey = 'latest_release';\n    let releaseData = await env.RELEASE_CACHE.get(cacheKey, 'json');\n\n    if (!releaseData) {\n      // Fetch from GitHub API\n      const apiUrl = `https://api.github.com/repos/${env.GITHUB_REPO_OWNER}/${env.GITHUB_REPO_NAME}/releases/latest`;\n      const headers = buildGithubHeaders(env, {\n        Accept: 'application/vnd.github.v3+json'\n      });\n\n      const response = await fetch(apiUrl, { headers });\n\n      if (!response.ok) {\n        const bodyText = await response.text();\n        const details = describeGithubFailure(response, bodyText, env);\n        console.error('GitHub latest release error:', details);\n        const error = new Error(`GitHub API error: ${response.status}`);\n        error.details = details;\n        throw error;\n      }\n\n      releaseData = await response.json();\n\n      // Cache for 10 minutes\n      await env.RELEASE_CACHE.put(cacheKey, JSON.stringify(releaseData), {\n        expirationTtl: 600\n      });\n    }\n\n    const result = {\n      version: releaseData.tag_name,\n      published_at: releaseData.published_at,\n      prerelease: releaseData.prerelease,\n      draft: releaseData.draft,\n      download_urls: extractDownloadUrls(releaseData.assets),\n      changelog_url: releaseData.html_url,\n      body: releaseData.body\n    };\n\n    return new Response(JSON.stringify(result, null, 2), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'public, max-age=600', // 10 minutes\n        ...corsHeaders\n      }\n    });\n\n  } catch (error) {\n    console.error('Latest version error:', error);\n\n    return new Response(JSON.stringify({\n      error: 'Failed to fetch latest version',\n      message: error.message,\n      details: error.details || null\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n}\n\nasync function handleVersionCheck(request, env) {\n  try {\n    const url = new URL(request.url);\n    const currentVersion = url.searchParams.get('current') || url.searchParams.get('version');\n    const platform = url.searchParams.get('platform') || 'unknown';\n    const arch = url.searchParams.get('arch') || 'unknown';\n\n    if (!currentVersion) {\n      return new Response(JSON.stringify({\n        error: 'Missing current version parameter'\n      }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n\n    // Get latest version info\n    const latestResponse = await handleLatestVersion(request, env);\n    const latestData = await latestResponse.json();\n\n    if (latestResponse.status !== 200) {\n      return latestResponse;\n    }\n\n    const latestVersion = latestData.version;\n    const newerVersionAvailable = compareVersions(latestVersion, currentVersion) > 0;\n\n    const result = {\n      current_version: currentVersion,\n      latest_version: latestVersion,\n      newer_version_available: newerVersionAvailable,\n      platform: platform,\n      architecture: arch,\n      download_urls: latestData.download_urls,\n      changelog_url: latestData.changelog_url,\n      security_update: await isSecurityUpdate(latestData.body),\n      minimum_supported_version: await getMinimumSupportedVersion(env),\n      deprecation_warnings: await getDeprecationWarnings(currentVersion, env),\n      update_urgency: await getUpdateUrgency(currentVersion, latestVersion, latestData.body)\n    };\n\n    return new Response(JSON.stringify(result, null, 2), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'public, max-age=300', // 5 minutes\n        ...corsHeaders\n      }\n    });\n\n  } catch (error) {\n    console.error('Version check error:', error);\n    \n    return new Response(JSON.stringify({\n      error: 'Failed to check version',\n      message: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n}\n\nfunction extractDownloadUrls(assets) {\n  const urls = {};\n  \n  assets.forEach(asset => {\n    const name = asset.name.toLowerCase();\n    \n    if (name.includes('linux') && name.includes('x64')) {\n      urls['linux-x64'] = asset.browser_download_url;\n    } else if (name.includes('linux') && name.includes('arm64')) {\n      urls['linux-arm64'] = asset.browser_download_url;\n    } else if (name.includes('windows') && name.includes('x64')) {\n      urls['windows-x64'] = asset.browser_download_url;\n    } else if (name.includes('macos') && name.includes('x64')) {\n      urls['macos-x64'] = asset.browser_download_url;\n    } else if (name.includes('macos') && name.includes('arm64')) {\n      urls['macos-arm64'] = asset.browser_download_url;\n    }\n  });\n  \n  return urls;\n}\n\nfunction compareVersions(version1, version2) {\n  // Remove 'v' prefix if present\n  const v1 = version1.replace(/^v/, '').split('.').map(Number);\n  const v2 = version2.replace(/^v/, '').split('.').map(Number);\n  \n  for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n    const a = v1[i] || 0;\n    const b = v2[i] || 0;\n    \n    if (a > b) return 1;\n    if (a < b) return -1;\n  }\n  \n  return 0;\n}\n\nasync function isSecurityUpdate(releaseBody) {\n  if (!releaseBody) return false;\n  \n  const securityKeywords = [\n    'security', 'vulnerability', 'cve', 'exploit', \n    'patch', 'hotfix', 'critical', 'urgent'\n  ];\n  \n  const bodyLower = releaseBody.toLowerCase();\n  return securityKeywords.some(keyword => bodyLower.includes(keyword));\n}\n\nasync function getMinimumSupportedVersion(env) {\n  // This could be stored in KV store and updated as needed\n  const config = await env.CONFIG?.get('minimum_supported_version');\n  return config || 'v1.0.0';\n}\n\nasync function getDeprecationWarnings(currentVersion, env) {\n  // Check if current version has any deprecation warnings\n  const warnings = await env.CONFIG?.get('deprecation_warnings', 'json') || {};\n  return warnings[currentVersion] || [];\n}\n\nasync function getUpdateUrgency(currentVersion, latestVersion, releaseBody) {\n  // Determine update urgency based on version gap and release notes\n  const versionGap = compareVersions(latestVersion, currentVersion);\n  \n  if (await isSecurityUpdate(releaseBody)) {\n    return 'critical';\n  }\n  \n  if (versionGap >= 2) { // Major version difference\n    return 'high';\n  } else if (versionGap >= 1) { // Minor version difference\n    return 'medium';\n  }\n  \n  return 'low';\n}", "import { corsHeaders } from '../utils/cors.js';\nimport { buildGithubHeaders, describeGithubFailure } from '../utils/github.js';\n\nexport async function proxyHandler(request, env) {\n  try {\n    const url = new URL(request.url);\n    const pathParts = url.pathname.split('/').filter(Boolean);\n\n    // Extract version and filename from URL\n    // Format: /releases/proxy/{version}/{filename}\n    const version = pathParts[2];\n    const rawFilename = pathParts.slice(3).join('/');\n    const filename = rawFilename ? decodeURIComponent(rawFilename) : undefined;\n\n    console.log('Proxy request received', {\n      url: request.url,\n      version,\n      rawFilename,\n      filename\n    });\n\n    console.log('GitHub token presence', {\n      hasToken: Boolean(env.GITHUB_TOKEN)\n    });\n    \n    if (!version || !filename) {\n      return new Response('Invalid proxy URL format', {\n        status: 400,\n        headers: corsHeaders\n      });\n    }\n\n    // Handle \"latest\" version\n    let actualVersion = version;\n    if (version === 'latest') {\n      actualVersion = await getLatestVersion(env);\n      if (!actualVersion) {\n        return new Response('Could not resolve latest version', {\n          status: 500,\n          headers: corsHeaders\n        });\n      }\n    }\n\n    // Resolve the actual GitHub download URL, falling back to API lookups when needed\n    const resolution = await resolveDownloadSource(env, actualVersion, filename);\n    console.log('Resolution result', {\n      requestedVersion: version,\n      actualVersion,\n      filename,\n      resolution\n    });\n    if (!resolution?.downloadUrl) {\n      return new Response(JSON.stringify({\n        error: `Release file not found: ${filename}`,\n        details: resolution?.details || 'Asset missing from GitHub release'\n      }, null, 2), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n\n    const githubUrl = resolution.downloadUrl;\n\n    // Check cache first\n    const cacheKey = `release:${actualVersion}:${filename}`;\n    let cachedResponse = await env.RELEASE_CACHE.get(cacheKey, 'arrayBuffer');\n    \n    if (cachedResponse) {\n      // Serve from cache\n      return new Response(cachedResponse, {\n        headers: {\n          'Content-Type': getContentType(filename),\n          'Cache-Control': 'public, max-age=86400', // 24 hours\n          'X-Cache': 'HIT',\n          'X-Version': actualVersion,\n          ...corsHeaders\n        }\n      });\n    }\n\n    // Fetch from GitHub\n    // For HEAD requests return header metadata without downloading the full asset\n    if (request.method === 'HEAD') {\n      console.log('Handling HEAD request', {\n        version: actualVersion,\n        filename,\n        source: resolution?.source,\n        hasAssetMeta: Boolean(resolution?.asset)\n      });\n      const responseHeaders = new Headers(corsHeaders);\n      const assetMeta = resolution?.asset;\n\n      if (assetMeta) {\n        console.log('Using metadata for HEAD response', {\n          version: actualVersion,\n          filename,\n          size: assetMeta.size,\n          contentType: assetMeta.content_type\n        });\n        if (assetMeta.content_type) {\n          responseHeaders.set('Content-Type', assetMeta.content_type);\n        } else {\n          responseHeaders.set('Content-Type', getContentType(filename));\n        }\n        if (typeof assetMeta.size === 'number') {\n          responseHeaders.set('Content-Length', assetMeta.size.toString());\n        }\n        if (assetMeta.updated_at) {\n          responseHeaders.set('Last-Modified', new Date(assetMeta.updated_at).toUTCString());\n        }\n      } else {\n        const headResponse = await fetch(githubUrl, {\n          method: 'HEAD',\n          headers: buildGithubHeaders(env)\n        });\n\n        console.log('GitHub HEAD response', {\n          url: githubUrl,\n          status: headResponse.status,\n          ok: headResponse.ok\n        });\n\n        if (!headResponse.ok) {\n          const bodyText = await headResponse.text();\n          const details = describeGithubFailure(headResponse, bodyText, env);\n          return new Response(JSON.stringify({\n            error: `HEAD failed for ${filename}`,\n            details\n          }, null, 2), {\n            status: headResponse.status,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n\n        headResponse.headers.forEach((value, key) => {\n          responseHeaders.set(key, value);\n        });\n      }\n\n      responseHeaders.set('X-Cache', 'MISS');\n      responseHeaders.set('X-Version', actualVersion);\n      if (resolution?.source) {\n        responseHeaders.set('X-Source', resolution.source);\n      }\n\n      return new Response(null, {\n        status: 200,\n        headers: responseHeaders\n      });\n    }\n\n    const githubResponse = await fetch(githubUrl, {\n      headers: buildGithubHeaders(env)\n    });\n\n    console.log('GitHub fetch response', {\n      url: githubUrl,\n      status: githubResponse.status,\n      ok: githubResponse.ok\n    });\n\n    if (!githubResponse.ok) {\n      const bodyText = await githubResponse.text();\n      const details = describeGithubFailure(githubResponse, bodyText, env);\n      console.error('GitHub proxy asset error:', {\n        url: githubUrl,\n        details\n      });\n      return new Response(JSON.stringify({\n        error: `Release file not found: ${filename}`,\n        details\n      }, null, 2), {\n        status: githubResponse.status,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n\n    const content = await githubResponse.arrayBuffer();\n    const contentType = githubResponse.headers.get('Content-Type') || getContentType(filename);\n\n    // Cache the response (for smaller files only, e.g., < 10MB)\n    if (content.byteLength < 10 * 1024 * 1024) {\n      await env.RELEASE_CACHE.put(cacheKey, content, {\n        expirationTtl: 86400 // 24 hours\n      });\n    }\n\n    // Add download analytics\n    if (env.ANALYTICS_ENABLED) {\n      // Don't await this to avoid slowing down the download\n      recordDownload(request, env, actualVersion, filename, content.byteLength);\n    }\n\n    return new Response(content, {\n      headers: {\n        'Content-Type': contentType,\n        'Content-Length': content.byteLength.toString(),\n        'Cache-Control': 'public, max-age=86400', // 24 hours\n        'X-Cache': 'MISS',\n        'X-Version': actualVersion,\n        'X-Content-Length': content.byteLength.toString(),\n        ...(resolution?.source ? { 'X-Source': resolution.source } : {}),\n        ...corsHeaders\n      }\n    });\n\n  } catch (error) {\n    console.error('Proxy handler error:', error);\n    \n    return new Response('Proxy error', {\n      status: 500,\n      headers: {\n        'Content-Type': 'text/plain',\n        ...corsHeaders\n      }\n    });\n  }\n}\n\nasync function getLatestVersion(env) {\n  try {\n    const cacheKey = 'latest_release';\n    let releaseData = await env.RELEASE_CACHE.get(cacheKey, 'json');\n\n    if (!releaseData) {\n      const apiUrl = `https://api.github.com/repos/${env.GITHUB_REPO_OWNER}/${env.GITHUB_REPO_NAME}/releases/latest`;\n      const headers = buildGithubHeaders(env, {\n        Accept: 'application/vnd.github.v3+json'\n      });\n\n      const response = await fetch(apiUrl, { headers });\n\n      if (response.ok) {\n        releaseData = await response.json();\n        await env.RELEASE_CACHE.put(cacheKey, JSON.stringify(releaseData), {\n          expirationTtl: 600 // 10 minutes\n        });\n      } else {\n        const bodyText = await response.text();\n        const details = describeGithubFailure(response, bodyText, env);\n        console.error('GitHub latest version lookup failed in proxy handler:', details);\n      }\n    }\n\n    return releaseData?.tag_name;\n  } catch (error) {\n    console.error('Error getting latest version:', error);\n    return null;\n  }\n}\n\nasync function resolveDownloadSource(env, version, filename) {\n  const owner = env.GITHUB_REPO_OWNER;\n  const repo = env.GITHUB_REPO_NAME;\n  const directUrl = `https://github.com/${owner}/${repo}/releases/download/${version}/${encodeURIComponent(filename)}`;\n\n  console.log('Resolving download source', {\n    version,\n    filename,\n    directUrl\n  });\n\n  // Attempt metadata-assisted lookup first to reduce failed GETs.\n  const metadata = await getReleaseMetadata(env, version);\n  console.log('Metadata lookup result', {\n    version,\n    hasMetadata: Boolean(metadata),\n    assetCount: metadata?.assets?.length || 0\n  });\n  const assetFromMeta = metadata?.assets?.find(asset => asset?.name === filename);\n  if (assetFromMeta?.browser_download_url) {\n    console.log('Found asset in metadata', {\n      version,\n      filename,\n      source: 'metadata'\n    });\n    return {\n      downloadUrl: assetFromMeta.browser_download_url,\n      source: 'metadata',\n      asset: assetFromMeta\n    };\n  }\n\n  // Try direct URL if metadata missing or asset not listed.\n  const directTest = await fetch(directUrl, {\n    method: 'HEAD',\n    headers: buildGithubHeaders(env)\n  });\n\n  console.log('Direct HEAD check', {\n    url: directUrl,\n    status: directTest.status,\n    ok: directTest.ok\n  });\n\n  if (directTest.ok || directTest.status === 302) {\n    return {\n      downloadUrl: directUrl,\n      source: 'direct-head'\n    };\n  }\n\n  // When direct HEAD fails, refresh metadata from GitHub API in case cache was stale\n  const refreshedMetadata = await getReleaseMetadata(env, version, { forceRefresh: true });\n  console.log('Metadata refresh result', {\n    version,\n    hasMetadata: Boolean(refreshedMetadata),\n    assetCount: refreshedMetadata?.assets?.length || 0\n  });\n  const refreshedAsset = refreshedMetadata?.assets?.find(asset => asset?.name === filename);\n  if (refreshedAsset?.browser_download_url) {\n    return {\n      downloadUrl: refreshedAsset.browser_download_url,\n      source: 'metadata-refresh',\n      asset: refreshedAsset\n    };\n  }\n\n  // Try alternate tag formats (with or without leading v)\n  const altVersion = version.startsWith('v') ? version.substring(1) : `v${version}`;\n  console.log('Trying alternate version', {\n    version,\n    altVersion\n  });\n  if (altVersion !== version) {\n    const altMetadata = await getReleaseMetadata(env, altVersion);\n    console.log('Alternate metadata lookup', {\n      altVersion,\n      hasMetadata: Boolean(altMetadata),\n      assetCount: altMetadata?.assets?.length || 0\n    });\n    const altAsset = altMetadata?.assets?.find(asset => asset?.name === filename);\n    if (altAsset?.browser_download_url) {\n      return {\n        downloadUrl: altAsset.browser_download_url,\n        source: 'metadata-alt',\n        asset: altAsset\n      };\n    }\n\n    const altDirectUrl = `https://github.com/${owner}/${repo}/releases/download/${altVersion}/${encodeURIComponent(filename)}`;\n    const altHead = await fetch(altDirectUrl, {\n      method: 'HEAD',\n      headers: buildGithubHeaders(env)\n    });\n    console.log('Alternate direct HEAD check', {\n      url: altDirectUrl,\n      status: altHead.status,\n      ok: altHead.ok\n    });\n    if (altHead.ok || altHead.status === 302) {\n      return {\n        downloadUrl: altDirectUrl,\n        source: 'direct-alt-head'\n      };\n    }\n  }\n\n  return {\n    downloadUrl: null,\n    source: 'unresolved',\n    details: {\n      reason: 'not_found',\n      version,\n      filename\n    }\n  };\n}\n\nasync function getReleaseMetadata(env, version, options = {}) {\n  if (!version) {\n    return null;\n  }\n\n  const { forceRefresh = false } = options;\n  const cacheKey = `release_meta:${version}`;\n\n  if (!forceRefresh) {\n    const cached = await env.RELEASE_CACHE.get(cacheKey, 'json');\n    console.log('KV metadata cache lookup', {\n      version,\n      cacheHit: Boolean(cached)\n    });\n    if (cached) {\n      return cached;\n    }\n  }\n\n  const apiUrl = `https://api.github.com/repos/${env.GITHUB_REPO_OWNER}/${env.GITHUB_REPO_NAME}/releases/tags/${version}`;\n  const headers = buildGithubHeaders(env, {\n    Accept: 'application/vnd.github.v3+json'\n  });\n\n  try {\n    const response = await fetch(apiUrl, { headers });\n    if (!response.ok) {\n      const logContext = {\n        version,\n        status: response.status\n      };\n      if (response.status === 401 || response.status === 403) {\n        console.warn('Release metadata fetch unauthorized', {\n          ...logContext,\n          hasToken: Boolean(env.GITHUB_TOKEN)\n        });\n      } else {\n        console.error('Release metadata fetch failed', logContext);\n      }\n\n      // Don't spam logs on repeated 404s when versions truly missing\n      if (response.status !== 404) {\n        const bodyText = await response.text();\n        const details = describeGithubFailure(response, bodyText, env);\n        console.error('GitHub release metadata fetch failed:', {\n          version,\n          details\n        });\n      }\n      return null;\n    }\n\n    const metadata = await response.json();\n    console.log('Fetched metadata from GitHub', {\n      version,\n      assetCount: metadata?.assets?.length || 0\n    });\n    await env.RELEASE_CACHE.put(cacheKey, JSON.stringify(metadata), {\n      expirationTtl: 600 // 10 minutes\n    });\n    return metadata;\n  } catch (error) {\n    console.error('Error fetching release metadata', {\n      version,\n      error: error?.message || error\n    });\n    return null;\n  }\n}\n\nfunction getContentType(filename) {\n  const ext = filename.toLowerCase().split('.').pop();\n  \n  const mimeTypes = {\n    'tar.gz': 'application/gzip',\n    'tgz': 'application/gzip',\n    'zip': 'application/zip',\n    'exe': 'application/octet-stream',\n    'deb': 'application/vnd.debian.binary-package',\n    'rpm': 'application/x-rpm',\n    'dmg': 'application/x-apple-diskimage',\n    'pkg': 'application/x-newton-compatible-pkg',\n    'msi': 'application/x-msi',\n    'sig': 'application/pgp-signature',\n    'asc': 'text/plain',\n    'sha256': 'text/plain',\n    'md5': 'text/plain'\n  };\n\n  // Handle compound extensions\n  if (filename.endsWith('.tar.gz')) {\n    return mimeTypes['tar.gz'];\n  }\n\n  return mimeTypes[ext] || 'application/octet-stream';\n}\n\nasync function recordDownload(request, env, version, filename, size) {\n  try {\n    const timestamp = Date.now();\n    const country = request.cf?.country || 'unknown';\n    const userAgent = request.headers.get('User-Agent') || 'unknown';\n    \n    const downloadData = {\n      timestamp,\n      version,\n      filename,\n      size,\n      country,\n      userAgent: hashUserAgent(userAgent), // Hash for privacy\n      ip_hash: await hashIP(request.headers.get('CF-Connecting-IP'))\n    };\n\n    const analyticsKey = `download:${timestamp}:${Math.random().toString(36).substr(2, 9)}`;\n    \n    await env.ANALYTICS.put(analyticsKey, JSON.stringify(downloadData), {\n      expirationTtl: 2592000 // 30 days\n    });\n\n    // Also update aggregate stats\n    const dailyKey = `daily_downloads:${new Date().toISOString().split('T')[0]}`;\n    const currentCount = await env.ANALYTICS.get(dailyKey) || '0';\n    await env.ANALYTICS.put(dailyKey, (parseInt(currentCount) + 1).toString(), {\n      expirationTtl: 2592000 // 30 days\n    });\n\n  } catch (error) {\n    console.error('Error recording download:', error);\n  }\n}\n\nfunction hashUserAgent(userAgent) {\n  // Simple hash to anonymize user agent while preserving some analytics value\n  const platform = userAgent.toLowerCase();\n  if (platform.includes('windows')) return 'windows';\n  if (platform.includes('mac')) return 'macos';\n  if (platform.includes('linux')) return 'linux';\n  if (platform.includes('curl')) return 'curl';\n  if (platform.includes('wget')) return 'wget';\n  if (platform.includes('powershell')) return 'powershell';\n  return 'other';\n}\n\nasync function hashIP(ip) {\n  if (!ip) return 'unknown';\n  \n  // Create a simple hash of the IP for privacy\n  const encoder = new TextEncoder();\n  const data = encoder.encode(ip + 'salt_string_here');\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('').substr(0, 16);\n}\n\nexport const __testables__ = {\n  resolveDownloadSource,\n  getReleaseMetadata\n};", "function detectPlatform(userAgent = '') {\n  const ua = userAgent.toLowerCase();\n  if (ua.includes('windows')) return 'windows';\n  if (ua.includes('mac os') || ua.includes('macintosh')) return 'mac';\n  if (ua.includes('linux')) return 'linux';\n  if (ua.includes('android')) return 'android';\n  if (ua.includes('iphone') || ua.includes('ipad') || ua.includes('ios')) return 'ios';\n  return 'other';\n}\n\nexport async function trackRequest(request, env) {\n  if (!env || String(env.ANALYTICS_ENABLED).toLowerCase() !== 'true') {\n    return;\n  }\n\n  if (!env.ANALYTICS) {\n    console.warn('ANALYTICS binding missing; skipping analytics tracking');\n    return;\n  }\n\n  try {\n    const now = new Date();\n    const dateKey = now.toISOString().slice(0, 10); // YYYY-MM-DD\n    const url = new URL(request.url);\n    const userAgent = request.headers.get('User-Agent') || '';\n    const platform = detectPlatform(userAgent);\n    const storageKey = `stats:${dateKey}`;\n\n    const existing = await env.ANALYTICS.get(storageKey);\n    let record;\n    if (existing) {\n      try {\n        record = JSON.parse(existing);\n      } catch (error) {\n        console.error('Failed to parse analytics record', error);\n        record = { total: 0, paths: {}, platforms: {} };\n      }\n    } else {\n      record = { total: 0, paths: {}, platforms: {} };\n    }\n\n    record.total += 1;\n    record.paths[url.pathname] = (record.paths[url.pathname] || 0) + 1;\n    record.platforms[platform] = (record.platforms[platform] || 0) + 1;\n    record.updatedAt = now.toISOString();\n\n    await env.ANALYTICS.put(storageKey, JSON.stringify(record), {\n      expirationTtl: Number(env.ANALYTICS_RETENTION_DAYS || 45) * 24 * 60 * 60\n    });\n  } catch (error) {\n    console.error('Analytics tracking failed:', error);\n  }\n}\n\nexport async function fetchAnalytics(env, type) {\n  if (!env || !env.ANALYTICS) {\n    return { error: 'Analytics storage not configured' };\n  }\n\n  const prefix = 'stats:';\n  const allKeys = await env.ANALYTICS.list({ prefix, limit: 1000 });\n  const records = [];\n\n  for (const { name } of allKeys.keys) {\n    const value = await env.ANALYTICS.get(name);\n    if (!value) continue;\n\n    try {\n      const parsed = JSON.parse(value);\n      records.push({\n        date: name.substring(prefix.length),\n        ...parsed\n      });\n    } catch (error) {\n      console.error('Failed to parse analytics entry', name, error);\n    }\n  }\n\n  if (type === 'platforms') {\n    const aggregation = {};\n    for (const record of records) {\n      for (const [platform, count] of Object.entries(record.platforms || {})) {\n        aggregation[platform] = (aggregation[platform] || 0) + count;\n      }\n    }\n    return { platforms: aggregation };\n  }\n\n  // default to daily stats\n  return {\n    days: records\n      .sort((a, b) => (a.date < b.date ? 1 : -1))\n      .map(record => ({\n        date: record.date,\n        total: record.total || 0,\n        paths: record.paths || {},\n        platforms: record.platforms || {}\n      }))\n  };\n}\n", "import { fetchAnalytics } from '../utils/analytics.js';\nimport { corsHeaders } from '../utils/cors.js';\n\nexport async function analyticsHandler(request, env) {\n  if (!env || String(env.ANALYTICS_ENABLED).toLowerCase() !== 'true') {\n    return new Response(JSON.stringify({ error: 'Analytics disabled' }), {\n      status: 404,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n\n  try {\n    const url = new URL(request.url);\n    const type = url.pathname.split('/').pop();\n    const payload = await fetchAnalytics(env, type);\n\n    return new Response(JSON.stringify(payload, null, 2), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store',\n        ...corsHeaders\n      }\n    });\n  } catch (error) {\n    console.error('Analytics handler failed:', error);\n    return new Response(JSON.stringify({ error: 'Failed to load analytics' }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n}\n", "import { corsHeaders } from '../utils/cors.js';\n\nexport async function healthHandler(request, env) {\n  const analyticsEnabled = env && typeof env.ANALYTICS_ENABLED !== 'undefined'\n    ? String(env.ANALYTICS_ENABLED).toLowerCase() === 'true'\n    : false;\n  const rateLimitEnabled = env && typeof env.RATE_LIMIT_ENABLED !== 'undefined'\n    ? String(env.RATE_LIMIT_ENABLED).toLowerCase() === 'true'\n    : false;\n\n  const status = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    environment: env && env.ENVIRONMENT ? env.ENVIRONMENT : 'production',\n    checks: {\n      releaseCache: 'unconfigured',\n      analytics: analyticsEnabled ? 'enabled' : 'disabled',\n      rateLimiting: rateLimitEnabled ? 'enabled' : 'disabled'\n    }\n  };\n\n  if (env && env.RELEASE_CACHE) {\n    try {\n      const cached = await env.RELEASE_CACHE.get('latest_release');\n      status.checks.releaseCache = cached ? 'hit' : 'miss';\n    } catch (error) {\n      status.checks.releaseCache = 'error';\n      status.status = 'degraded';\n      status.error = `Cache check failed: ${error.message}`;\n    }\n  }\n\n  return new Response(JSON.stringify(status, null, 2), {\n    headers: {\n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-store',\n      ...corsHeaders\n    }\n  });\n}\n", "const DEFAULT_LIMIT = 120;\nconst DEFAULT_WINDOW_SECONDS = 60;\nconst buckets = new Map();\n\nfunction getBucket(key) {\n  const now = Date.now();\n  const entry = buckets.get(key);\n  if (entry && entry.expiresAt > now) {\n    return entry;\n  }\n  const windowSeconds = DEFAULT_WINDOW_SECONDS;\n  const expiresAt = now + windowSeconds * 1000;\n  const bucket = { count: 0, expiresAt };\n  buckets.set(key, bucket);\n  return bucket;\n}\n\nexport async function rateLimiter(request, env) {\n  if (!env || String(env.RATE_LIMIT_ENABLED).toLowerCase() !== 'true') {\n    return;\n  }\n\n  const limit = Number(env.RATE_LIMIT_MAX_REQUESTS || DEFAULT_LIMIT);\n  const windowSeconds = Number(env.RATE_LIMIT_WINDOW_SECONDS || DEFAULT_WINDOW_SECONDS);\n  const now = Date.now();\n  const clientKey = request.headers.get('CF-Connecting-IP') || 'anonymous';\n\n  let bucket = buckets.get(clientKey);\n  if (!bucket || bucket.expiresAt <= now) {\n    bucket = {\n      count: 0,\n      expiresAt: now + windowSeconds * 1000\n    };\n    buckets.set(clientKey, bucket);\n  }\n\n  bucket.count += 1;\n\n  if (bucket.count > limit) {\n    const retryAfter = Math.max(1, Math.ceil((bucket.expiresAt - now) / 1000));\n    return new Response('Too Many Requests', {\n      status: 429,\n      headers: {\n        'Retry-After': String(retryAfter),\n        'Content-Type': 'text/plain'\n      }\n    });\n  }\n}\n", "import { Router } from 'itty-router';\nimport { installHandler } from './handlers/install.js';\nimport { versionHandler } from './handlers/version.js';\nimport { proxyHandler } from './handlers/proxy.js';\nimport { analyticsHandler } from './handlers/analytics.js';\nimport { healthHandler } from './handlers/health.js';\nimport { rateLimiter } from './utils/rateLimit.js';\nimport { corsHeaders, handleCORS } from './utils/cors.js';\nimport { trackRequest } from './utils/analytics.js';\nimport { buildGithubHeaders, describeGithubFailure } from './utils/github.js';\n\nconst router = Router();\n\n// CORS preflight handling\nrouter.options('*', handleCORS);\n\n// Health check endpoint\nrouter.get('/health', healthHandler);\n\n// Installation script endpoints\nrouter.get('/install.sh', rateLimiter, installHandler);\nrouter.get('/install.ps1', rateLimiter, installHandler);\nrouter.get('/install-macos.sh', rateLimiter, installHandler);\n\n// Version API endpoints\nrouter.get('/api/version/check', rateLimiter, versionHandler);\nrouter.get('/api/version/latest', rateLimiter, versionHandler);\n\n// GitHub proxy endpoints for releases\nrouter.get('/releases/proxy/:version/:filename', rateLimiter, proxyHandler);\nrouter.get('/releases/proxy/latest/:filename', rateLimiter, proxyHandler);\nrouter.head('/releases/proxy/:version/:filename', rateLimiter, proxyHandler);\nrouter.head('/releases/proxy/latest/:filename', rateLimiter, proxyHandler);\n\n// Analytics and statistics (optional, for monitoring)\nrouter.get('/api/stats/:type', analyticsHandler);\n\n// Root endpoint with service information\nrouter.get('/', async (request, env) => {\n  const response = {\n    service: 'cert-ctrl-install-service',\n    version: '1.0.0',\n    endpoints: {\n      'Unix/Linux Install': '/install.sh',\n  'macOS Install': '/install-macos.sh',\n      'Windows Install': '/install.ps1',\n      'Version Check': '/api/version/check',\n      'Latest Version': '/api/version/latest',\n      'Proxy Releases': '/releases/proxy/{version}/{filename}',\n      'Health Check': '/health'\n    },\n    usage: {\n      'Quick Install (Unix)': 'curl -fsSL https://install.lets-script.com/install.sh | bash',\n  'Quick Install (macOS)': 'curl -fsSL https://install.lets-script.com/install-macos.sh | sudo bash',\n      'Quick Install (Windows)': 'iwr -useb https://install.lets-script.com/install.ps1 | iex',\n      'Version Check': 'curl https://install.lets-script.com/api/version/latest'\n    }\n  };\n\n  return new Response(JSON.stringify(response, null, 2), {\n    headers: {\n      'Content-Type': 'application/json',\n      ...corsHeaders\n    }\n  });\n});\n\n// 404 handler\nrouter.all('*', () => {\n  return new Response('Not Found', { \n    status: 404,\n    headers: corsHeaders\n  });\n});\n\n// Main worker fetch handler\nexport default {\n  async fetch(request, env, ctx) {\n    try {\n      // Track request for analytics (if enabled)\n      if (env.ANALYTICS_ENABLED) {\n        ctx.waitUntil(trackRequest(request, env));\n      }\n\n      // Route the request\n      const response = await router.handle(request, env, ctx);\n      \n      // Add security headers\n      response.headers.set('X-Content-Type-Options', 'nosniff');\n      response.headers.set('X-Frame-Options', 'DENY');\n      response.headers.set('X-XSS-Protection', '1; mode=block');\n      response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n      \n      return response;\n    } catch (error) {\n      console.error('Worker error:', error);\n      \n      return new Response('Internal Server Error', {\n        status: 500,\n        headers: {\n          'Content-Type': 'text/plain',\n          ...corsHeaders\n        }\n      });\n    }\n  },\n\n  // Scheduled handler for maintenance tasks\n  async scheduled(event, env, ctx) {\n    switch (event.cron) {\n      case '0 */6 * * *': // Every 6 hours\n        ctx.waitUntil(warmCache(env));\n        ctx.waitUntil(cleanupAnalytics(env));\n        break;\n    }\n  }\n};\n\n// Cache warming function\nasync function warmCache(env) {\n  try {\n    // Pre-fetch latest release info to warm the cache\n    const latestUrl = `https://api.github.com/repos/${env.GITHUB_REPO_OWNER}/${env.GITHUB_REPO_NAME}/releases/latest`;\n    const headers = buildGithubHeaders(env, {\n      Accept: 'application/vnd.github.v3+json'\n    });\n\n    const response = await fetch(latestUrl, { headers });\n\n    if (response.ok) {\n      const data = await response.json();\n      const cacheKey = 'latest_release';\n      await env.RELEASE_CACHE.put(cacheKey, JSON.stringify(data), {\n        expirationTtl: 3600 // 1 hour\n      });\n      console.log('Cache warmed for latest release');\n    } else {\n      const bodyText = await response.text();\n      const details = describeGithubFailure(response, bodyText, env);\n      console.warn('Cache warm GitHub lookup failed:', details);\n    }\n  } catch (error) {\n    console.error('Cache warming failed:', error);\n  }\n}\n\n// Analytics cleanup function\nasync function cleanupAnalytics(env) {\n  try {\n    // Clean up old analytics data (keep last 30 days)\n    const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);\n    const cutoffKey = `analytics:${thirtyDaysAgo}`;\n    \n    // This would require a more sophisticated cleanup mechanism\n    // For now, just log the action\n    console.log('Analytics cleanup triggered');\n  } catch (error) {\n    console.error('Analytics cleanup failed:', error);\n  }\n}\n"],
  "mappings": "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",
  "names": ["PerformanceMark", "e", "clear", "count", "countReset", "createTask", "debug", "dir", "dirxml", "error", "group", "groupCollapsed", "groupEnd", "info", "log", "profile", "profileEnd", "table", "time", "timeEnd", "timeLog", "timeStamp", "trace", "warn", "hrtime", "dir", "env", "count", "cwd", "hrtime", "assert", "Router", "base", "routes", "other", "__proto__", "Proxy", "get", "target", "prop", "receiver", "path", "fetch", "route", "handlers", "push", "toUpperCase", "RegExp", "replace", "async", "request", "args", "response", "match", "url", "URL", "query", "k", "v", "searchParams", "concat", "method", "regex", "pathname", "params", "groups", "handler", "proxy", "createResponse", "format", "transform", "body", "headers", "rest", "constructor", "name", "Response", "entries", "Object", "fromEntries", "json", "JSON", "stringify", "text", "createResponse", "String", "html", "jpeg", "png", "webp", "platform", "env", "platform", "error", "env", "error", "env", "error", "platform", "arch", "i", "config", "env", "version", "error", "platform", "detectPlatform", "env", "platform", "error", "count", "env", "error", "env", "error", "env", "env", "error"]
}
