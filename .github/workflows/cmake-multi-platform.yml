name: CMake on multiple platforms

on:
  # Manual trigger from GitHub UI with optional inputs
  workflow_dispatch:
    inputs:
      build_type:
        description: CMake build type
        type: choice
        options:
          - Release
          - Debug
        default: Release
      runner_type:
        description: Choose GitHub-hosted or self-hosted runners
        type: choice
        options:
          - github-hosted
          - self-hosted
        default: github-hosted
      self_host_label:
        description: Label for the self-hosted runner (only used when runner_type=self-hosted)
        type: string
        default: self-hosted
      clean_build:
        description: Remove existing build directory on self-hosted runner before configuring
        type: choice
        options:
          - 'false'
          - 'true'
        default: 'false'
      skip_tests:
        description: Skip running ctest after the build
        type: choice
        options:
          - 'false'
          - 'true'
        default: 'false'
      os:
        description: "Platform to run (use 'all' to run all)"
        type: choice
        options:
          - all
          - ubuntu-latest
          - windows-latest
          - macos-latest
        default: all

# Cancel previous in-flight runs for the same ref to save time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  set-matrix:
    name: Prepare matrix
    runs-on: ubuntu-latest
    outputs:
      os-list: ${{ steps.set.outputs.os-list }}
    steps:
      - id: set
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.runner_type || 'github-hosted' }}" = "self-hosted" ]; then
            echo "os-list=[\"${{ github.event.inputs.self_host_label || 'self-hosted' }}\"]" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.os }}" ] && [ "${{ github.event.inputs.os }}" != "all" ]; then
            echo "os-list=[\"${{ github.event.inputs.os }}\"]" >> "$GITHUB_OUTPUT"
          else
            echo 'os-list=["ubuntu-latest","windows-latest","macos-latest"]' >> "$GITHUB_OUTPUT"
          fi

  build:
    needs: set-matrix
    runs-on: ${{ matrix.os }}
    env:
      # Enable vcpkg's GitHub Actions cache provider for fast binary caching
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      VCPKG_FEATURE_FLAGS: manifests,binarycaching,registries
      # Ensure Ninja is used everywhere
      CMAKE_GENERATOR: Ninja
      VCPKG_USE_NINJA: 1

    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.set-matrix.outputs.os-list) }}
        build_type:
          - ${{ github.event.inputs.build_type || 'Release' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          fetch-tags: true

      - name: Clean build directory (self-hosted)
        if: github.event.inputs.runner_type == 'self-hosted' && github.event.inputs.clean_build == 'true'
        run: |
          echo "Removing existing build artifacts from self-hosted runner"
          rm -rf "${{ github.workspace }}/build"
          rm -f "${{ github.workspace }}/compile_commands.json"

      - name: Cache vcpkg downloads
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/external/vcpkg/downloads
          key: vcpkg-downloads-${{ runner.os }}-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}
          restore-keys: |
            vcpkg-downloads-${{ runner.os }}-

      # Prepare MSVC environment on Windows runners
      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4

      # Extra guard: ensure Ninja is installed per-OS (fallback if action fails)
      - name: Ensure Ninja on macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          # Install Ninja and required autotools for libsodium
          brew install ninja autoconf automake libtool pkg-config libomp

      - name: Ensure Ninja on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libomp-dev

      - name: Ensure Ninja on Windows
        if: runner.os == 'Windows'
        run: choco install ninja --no-progress -y

      # Use vcpkg manifest mode via the repository submodule on all platforms
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Configure CMake (Unix)
        if: runner.os != 'Windows'
        run: >
          cmake -G "Ninja" -B "${{ github.workspace }}/build"
          -S "${{ github.workspace }}"
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || matrix.build_type }}
          -DCMAKE_C_COMPILER_LAUNCHER=sccache
          -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/external/vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: >
          cmake -G "Ninja" -B "${{ github.workspace }}/build"
          -S "${{ github.workspace }}"
          -DCMAKE_C_COMPILER=cl.exe
          -DCMAKE_CXX_COMPILER=cl.exe
          -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || matrix.build_type }}
          -DCMAKE_C_COMPILER_LAUNCHER=sccache
          -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/external/vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Build
        run: cmake --build "${{ github.workspace }}/build" --config ${{ matrix.build_type }}

      - name: Test
        if: github.event.inputs.skip_tests != 'true'
        working-directory: ${{ github.workspace }}/build
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Upload vcpkg logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: vcpkg-logs-${{ runner.os }}
          path: |
            ${{ github.workspace }}/build/vcpkg-manifest-install.log
            ${{ github.workspace }}/build/vcpkg_installed/*/buildtrees/**/*.log
            ${{ github.workspace }}/build/vcpkg_installed/*/buildtrees/**/*.txt
          if-no-files-found: ignore
