name: CMake on multiple platforms

on:
  # Manual trigger from GitHub UI with optional inputs
  workflow_dispatch:
    inputs:
      build_type:
        description: CMake build type
        type: choice
        options:
          - Release
          - Debug
        default: Release
      target_runner:
        description: Select where to run the workflow
        type: choice
        options:
          - github-all
          - github-ubuntu-latest
          - github-windows-latest
          - github-macos-latest
          - self-host-linux
          - self-host-windows
          - self-host-macos
          - self-host-all
          - self-host-custom
        default: github-all
      self_host_labels:
        description: Space-separated labels for the self-hosted runner (e.g. "self-hosted Linux X64")
        type: string
        default: self-hosted Linux X64
      clean_build:
        description: Remove existing build directory on self-hosted runner before configuring
        type: choice
        options:
          - 'false'
          - 'true'
        default: 'false'
      skip_tests:
        description: Skip running ctest after the build
        type: choice
        options:
          - 'false'
          - 'true'
        default: 'true'
      upload_artifacts:
        description: Upload compiled build directory as a workflow artifact
        type: choice
        options:
          - 'false'
          - 'true'
        default: 'true'
      release_tag:
        description: Optional tag to publish a GitHub release (requires artifacts)
        type: string
        default: ''

# Cancel previous in-flight runs for the same ref to save time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}${{ github.event_name == 'workflow_dispatch' && format('-manual-{0}', github.run_id) || '' }}
  cancel-in-progress: ${{ github.event_name != 'workflow_dispatch' }}

permissions:
  contents: write

jobs:
  set-matrix:
    name: Prepare matrix
    runs-on: ubuntu-latest
    outputs:
      os-list: ${{ steps.set.outputs.os-list }}
    steps:
      - id: set
        shell: bash
        env:
          SELF_HOST_LABELS: ${{ github.event.inputs.self_host_labels || 'self-hosted Linux X64' }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            target="${{ github.event.inputs.target_runner || 'github-all' }}"
            case "$target" in
              self-host-linux)
                echo 'os-list=[["self-hosted","Linux","X64"]]' >> "$GITHUB_OUTPUT"
                ;;
              self-host-windows)
                echo 'os-list=[["self-hosted","Windows","X64"]]' >> "$GITHUB_OUTPUT"
                ;;
              self-host-macos)
                echo 'os-list=[["self-hosted","macOS","X64"]]' >> "$GITHUB_OUTPUT"
                ;;
              self-host-all)
                echo 'os-list=[["self-hosted","Linux","X64"],["self-hosted","Windows","X64"],["self-hosted","macOS","X64"]]' >> "$GITHUB_OUTPUT"
                ;;
              self-host-custom)
                labels="$SELF_HOST_LABELS"
                labels="${labels//,/ }"
                json_labels=""
                for token in $labels; do
                  trimmed=$(printf '%s' "$token" | xargs)
                  if [ -n "$trimmed" ]; then
                    if [ -n "$json_labels" ]; then
                      json_labels="$json_labels,\"$trimmed\""
                    else
                      json_labels="\"$trimmed\""
                    fi
                  fi
                done
                if [ -z "$json_labels" ]; then
                  json_labels="\"self-hosted\""
                fi
                echo "os-list=[[${json_labels}]]" >> "$GITHUB_OUTPUT"
                ;;
              github-ubuntu-latest)
                echo 'os-list=["ubuntu-latest"]' >> "$GITHUB_OUTPUT"
                ;;
              github-windows-latest)
                echo 'os-list=["windows-latest"]' >> "$GITHUB_OUTPUT"
                ;;
              github-macos-latest)
                echo 'os-list=["macos-latest"]' >> "$GITHUB_OUTPUT"
                ;;
              github-all|*)
                echo 'os-list=["ubuntu-latest","windows-latest","macos-latest"]' >> "$GITHUB_OUTPUT"
                ;;
            esac
          else
            echo 'os-list=["ubuntu-latest","windows-latest","macos-latest"]' >> "$GITHUB_OUTPUT"
          fi

  build:
    needs: set-matrix
    runs-on: ${{ matrix.os }}
    env:
      # Enable vcpkg's GitHub Actions cache provider for fast binary caching
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      VCPKG_FEATURE_FLAGS: manifests,binarycaching,registries
      # Ensure Ninja is used everywhere
      CMAKE_GENERATOR: Ninja
      VCPKG_USE_NINJA: 1
      IS_SELF_HOSTED: ${{ startsWith(github.event.inputs.target_runner || 'github-all', 'self-host-') }}
      SKIP_CONFIGURE: 'false'
      ARTIFACT_PLATFORM: ''
      ARTIFACT_ARCH: ''
      ARTIFACT_SLUG: unknown
      ARTIFACT_BASE: cert-ctrl-unknown
      ARCHIVE_EXT: tar.gz

    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.set-matrix.outputs.os-list) }}
        build_type:
          - ${{ github.event.inputs.build_type || 'Release' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          fetch-tags: true

      - name: Determine artifact metadata (Unix)
        if: runner.os != 'Windows'
        run: |
          set -euo pipefail
          os_slug=$(printf '%s' "${RUNNER_OS:-linux}" | tr '[:upper:]' '[:lower:]')
          case "$os_slug" in
            macos|darwin)
              os_slug="macos"
              ;;
            linux)
              os_slug="linux"
              ;;
            *)
              os_slug="linux"
              ;;
          esac

          arch=$(uname -m)
          case "$arch" in
            x86_64|amd64)
              arch_slug="x64"
              ;;
            arm64|aarch64)
              arch_slug="arm64"
              ;;
            armv7*|armhf)
              arch_slug="arm"
              ;;
            *)
              arch_slug="x64"
              ;;
          esac

          artifact_slug="${os_slug}-${arch_slug}"
          {
            echo "ARTIFACT_PLATFORM=$os_slug"
            echo "ARTIFACT_ARCH=$arch_slug"
            echo "ARTIFACT_SLUG=$artifact_slug"
            echo "ARTIFACT_BASE=cert-ctrl-$artifact_slug"
            echo "ARCHIVE_EXT=tar.gz"
          } >> "$GITHUB_ENV"

      - name: Determine artifact metadata (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $osSlug = 'windows'
          switch -regex ($env:PROCESSOR_ARCHITECTURE) {
            'ARM64' { $archSlug = 'arm64'; break }
            'ARM' { $archSlug = 'arm'; break }
            default { $archSlug = 'x64' }
          }
          $artifactSlug = "$osSlug-$archSlug"
          "ARTIFACT_PLATFORM=$osSlug" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "ARTIFACT_ARCH=$archSlug" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "ARTIFACT_SLUG=$artifactSlug" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "ARTIFACT_BASE=cert-ctrl-$artifactSlug" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "ARCHIVE_EXT=zip" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Detect reusable configure (self-hosted Unix)
        if: env.IS_SELF_HOSTED == 'true' && runner.os != 'Windows' && github.event.inputs.clean_build != 'true'
        shell: bash
        run: |
          set -euo pipefail
          cache_file="${{ github.workspace }}/build/CMakeCache.txt"
          requested="${{ github.event.inputs.build_type || matrix.build_type }}"
          if [ -f "$cache_file" ]; then
            cached=$(awk -F= '/^CMAKE_BUILD_TYPE:STRING=/{print $2}' "$cache_file" || true)
            if [ "$cached" = "$requested" ]; then
              echo "Reusing existing CMake configuration for $requested"
              echo "SKIP_CONFIGURE=true" >> "$GITHUB_ENV"
              exit 0
            fi
          fi
          echo "SKIP_CONFIGURE=false" >> "$GITHUB_ENV"

      - name: Detect reusable configure (self-hosted Windows)
        if: env.IS_SELF_HOSTED == 'true' && runner.os == 'Windows' && github.event.inputs.clean_build != 'true'
        shell: pwsh
        run: |
          $cache = Join-Path "${{ github.workspace }}" 'build/CMakeCache.txt'
          $requested = "${{ github.event.inputs.build_type || matrix.build_type }}"
          if (Test-Path $cache) {
            $match = Select-String -Path $cache -Pattern '^CMAKE_BUILD_TYPE:STRING=(.*)$'
            if ($match) {
              $cached = $match.Matches[0].Groups[1].Value
              if ($cached -eq $requested) {
                Write-Host "Reusing existing CMake configuration for $requested"
                "SKIP_CONFIGURE=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                exit 0
              }
            }
          }
          "SKIP_CONFIGURE=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Reusing CMake configure cache
        if: env.SKIP_CONFIGURE == 'true'
        run: echo "Skipping CMake configure step; existing cache is compatible with requested build type."

      - name: Clean build directory (self-hosted)
        if: env.IS_SELF_HOSTED == 'true' && github.event.inputs.clean_build == 'true'
        run: |
          echo "Removing existing build artifacts from self-hosted runner"
          rm -rf "${{ github.workspace }}/build"
          rm -f "${{ github.workspace }}/compile_commands.json"

      - name: Cache vcpkg downloads
        if: env.IS_SELF_HOSTED != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/external/vcpkg/downloads
          key: vcpkg-downloads-${{ runner.os }}-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}
          restore-keys: |
            vcpkg-downloads-${{ runner.os }}-

      # Prepare MSVC environment on Windows runners
      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows' && env.IS_SELF_HOSTED != 'true'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Ninja
        if: env.IS_SELF_HOSTED != 'true'
        uses: seanmiddleditch/gha-setup-ninja@v4

      # Extra guard: ensure Ninja is installed per-OS (fallback if action fails)
      - name: Ensure Ninja on macOS
        if: runner.os == 'macOS' && env.IS_SELF_HOSTED != 'true'
        run: |
          brew update
          # Install Ninja and required autotools for libsodium
          brew install ninja autoconf automake libtool pkg-config libomp

      - name: Ensure Ninja on Ubuntu
        if: runner.os == 'Linux' && env.IS_SELF_HOSTED != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libomp-dev

      - name: Ensure Ninja on Windows
        if: runner.os == 'Windows' && env.IS_SELF_HOSTED != 'true'
        run: choco install ninja --no-progress -y

      # Use vcpkg manifest mode via the repository submodule on all platforms
      - name: Setup sccache
        if: env.IS_SELF_HOSTED != 'true'
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Configure CMake (Unix)
        if: runner.os != 'Windows' && env.SKIP_CONFIGURE != 'true'
        run: |
          set -euo pipefail
          cmake_args=(
            -G "Ninja"
            -B "${{ github.workspace }}/build"
            -S "${{ github.workspace }}"
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER=clang++
            -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || matrix.build_type }}
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/external/vcpkg/scripts/buildsystems/vcpkg.cmake"
          )
          if [ "${{ env.IS_SELF_HOSTED }}" != "true" ]; then
            cmake_args+=(
              -DCMAKE_C_COMPILER_LAUNCHER=sccache
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
            )
          fi
          cmake "${cmake_args[@]}"

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows' && env.SKIP_CONFIGURE != 'true'
        shell: pwsh
        run: |
          $cmakeArgs = @(
            '-G', 'Ninja',
            '-B', "${{ github.workspace }}/build",
            '-S', "${{ github.workspace }}",
            '-DCMAKE_C_COMPILER=cl.exe',
            '-DCMAKE_CXX_COMPILER=cl.exe',
            "-DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || matrix.build_type }}",
            "-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/external/vcpkg/scripts/buildsystems/vcpkg.cmake"
          )
          if ("${{ env.IS_SELF_HOSTED }}" -ne "true") {
            $cmakeArgs += @(
              '-DCMAKE_C_COMPILER_LAUNCHER=sccache',
              '-DCMAKE_CXX_COMPILER_LAUNCHER=sccache'
            )
          }
          cmake @cmakeArgs

      - name: Build
        run: cmake --build "${{ github.workspace }}/build" --config ${{ matrix.build_type }}

      - name: Test
        if: github.event.inputs.skip_tests != 'true'
        working-directory: ${{ github.workspace }}/build
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Install build outputs
        if: github.event.inputs.upload_artifacts == 'true'
        run: >
          cmake --install "${{ github.workspace }}/build"
          --config ${{ matrix.build_type }}
          --prefix "${{ github.workspace }}/install"

      - name: Package installer payload (Unix)
        if: github.event.inputs.upload_artifacts == 'true' && runner.os != 'Windows'
        run: |
          set -euo pipefail
          INSTALL_DIR="${{ github.workspace }}/install"
          BUILD_DIR="${{ github.workspace }}/build"
          PAYLOAD_DIR="${{ github.workspace }}/package"
          rm -rf "$PAYLOAD_DIR"
          mkdir -p "$PAYLOAD_DIR"
          if [ ! -d "$INSTALL_DIR/bin" ]; then
            echo "ERROR: Expected executable directory '$INSTALL_DIR/bin' missing" >&2
            exit 1
          fi
          if [ ! -f "$INSTALL_DIR/bin/cert-ctrl" ] && [ ! -f "$INSTALL_DIR/bin/cert-ctrl.exe" ]; then
            echo "ERROR: cert-ctrl executable not found in '$INSTALL_DIR/bin'" >&2
            exit 1
          fi
          mkdir -p "$PAYLOAD_DIR/bin"
          cp -a "$INSTALL_DIR/bin"/. "$PAYLOAD_DIR/bin"/
          DEST_DIR="${{ github.workspace }}/dist"
          mkdir -p "$DEST_DIR"
          ARCHIVE_NAME="${ARTIFACT_BASE:-cert-ctrl-unknown}.${ARCHIVE_EXT:-tar.gz}"
          tar -C "$PAYLOAD_DIR" -czf "$DEST_DIR/$ARCHIVE_NAME" .

      - name: Package installer payload (Windows)
        if: github.event.inputs.upload_artifacts == 'true' && runner.os == 'Windows'
        shell: pwsh
        run: |
          $install = Join-Path $env:GITHUB_WORKSPACE 'install'
          $build   = Join-Path $env:GITHUB_WORKSPACE 'build'
          $payload = Join-Path $env:GITHUB_WORKSPACE 'package'
          if (Test-Path $payload) { Remove-Item $payload -Recurse -Force }
          New-Item -Path $payload -ItemType Directory -Force | Out-Null
          $binSrc = Join-Path $install 'bin'
          $binDst = Join-Path $payload 'bin'
          if (-not (Test-Path $binSrc)) {
            Write-Error "Expected executable directory '$binSrc' missing"
            exit 1
          }
          $executables = Get-ChildItem -Path $binSrc -Filter *.exe -File -Recurse
          if (-not $executables) {
            Write-Error "No executables found in '$binSrc'"
            exit 1
          }
          robocopy $binSrc $binDst *.exe /E /XF *.pdb /NFL /NDL /NP /NJH /NJS | Out-Null
          if ($LASTEXITCODE -gt 3) { exit $LASTEXITCODE }
          if (-not (Test-Path $binDst)) {
            Write-Error "Failed to stage executables into '$binDst'"
            exit 1
          }
          $stagedExecutables = Get-ChildItem -Path $binDst -Filter *.exe -File -Recurse
          if (-not $stagedExecutables) {
            Write-Error "No executables were copied into '$binDst'"
            exit 1
          }
          $dest = Join-Path $env:GITHUB_WORKSPACE 'dist'
          New-Item -Path $dest -ItemType Directory -Force | Out-Null
          $archive = "${env:ARTIFACT_BASE:-cert-ctrl-unknown}.${env:ARCHIVE_EXT:-zip}"
          $archivePath = Join-Path $dest $archive
          if (Test-Path $archivePath) { Remove-Item $archivePath }
          Compress-Archive -Path (Join-Path $payload '*') -DestinationPath $archivePath

      - name: Upload installer artifact (Unix)
        if: github.event.inputs.upload_artifacts == 'true' && runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ env.ARTIFACT_SLUG }}
          path: ${{ github.workspace }}/dist/${{ env.ARTIFACT_BASE }}.${{ env.ARCHIVE_EXT }}
          if-no-files-found: error

      - name: Upload installer artifact (Windows)
        if: github.event.inputs.upload_artifacts == 'true' && runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ env.ARTIFACT_SLUG }}
          path: ${{ github.workspace }}/dist/${{ env.ARTIFACT_BASE }}.${{ env.ARCHIVE_EXT }}
          if-no-files-found: error

      - name: Upload vcpkg logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: vcpkg-logs-${{ runner.os }}
          path: |
            ${{ github.workspace }}/build/vcpkg-manifest-install.log
            ${{ github.workspace }}/build/vcpkg_installed/*/buildtrees/**/*.log
            ${{ github.workspace }}/build/vcpkg_installed/*/buildtrees/**/*.txt
          if-no-files-found: ignore

  publish-release:
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.upload_artifacts == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release tag
        id: release
        env:
          REQUESTED_TAG: ${{ github.event.inputs.release_tag }}
        run: |
          set -euo pipefail
          if [ -n "$REQUESTED_TAG" ]; then
            tag="$REQUESTED_TAG"
          else
            tag=$(git describe --tags --long --dirty --match "v*" 2>/dev/null || true)
            if [ -z "$tag" ]; then
              short_sha=$(git rev-parse --short HEAD)
              tag="build-${GITHUB_RUN_ID}-${short_sha}"
            fi
          fi
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Download installer artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          merge-multiple: true

      - name: List release assets
        run: |
          ls -al release-assets

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release.outputs.tag }}
          name: cert-ctrl ${{ steps.release.outputs.tag }}
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(steps.release.outputs.tag, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
