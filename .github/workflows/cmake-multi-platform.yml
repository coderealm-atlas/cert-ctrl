name: CMake on multiple platforms

on:
  # Manual trigger from GitHub UI with optional inputs
  workflow_dispatch:
    inputs:
      build_type:
        description: CMake build type
        type: choice
        options:
          - Release
          - Debug
        default: Release
      target_runner:
        description: Select where to run the workflow
        type: choice
        options:
          - github-all
          - github-ubuntu-latest
          - github-windows-latest
          - github-macos-latest
          - self-host-linux
          - self-host-windows
          - self-host-macos
          - self-host-custom
        default: github-all
      self_host_labels:
        description: Space-separated labels for the self-hosted runner (e.g. "self-hosted Linux X64")
        type: string
        default: self-hosted Linux X64
      clean_build:
        description: Remove existing build directory on self-hosted runner before configuring
        type: choice
        options:
          - 'false'
          - 'true'
        default: 'false'
      skip_tests:
        description: Skip running ctest after the build
        type: choice
        options:
          - 'false'
          - 'true'
        default: 'true'
      upload_artifacts:
        description: Upload compiled build directory as a workflow artifact
        type: choice
        options:
          - 'false'
          - 'true'
        default: 'true'

# Cancel previous in-flight runs for the same ref to save time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  set-matrix:
    name: Prepare matrix
    runs-on: ubuntu-latest
    outputs:
      os-list: ${{ steps.set.outputs.os-list }}
    steps:
      - id: set
        shell: bash
        env:
          SELF_HOST_LABELS: ${{ github.event.inputs.self_host_labels || 'self-hosted Linux X64' }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            target="${{ github.event.inputs.target_runner || 'github-all' }}"
            case "$target" in
              self-host-linux)
                echo 'os-list=[["self-hosted","Linux","X64"]]' >> "$GITHUB_OUTPUT"
                ;;
              self-host-windows)
                echo 'os-list=[["self-hosted","Windows","X64"]]' >> "$GITHUB_OUTPUT"
                ;;
              self-host-macos)
                echo 'os-list=[["self-hosted","macOS","X64"]]' >> "$GITHUB_OUTPUT"
                ;;
              self-host-custom)
                labels="$SELF_HOST_LABELS"
                labels="${labels//,/ }"
                json_labels=""
                for token in $labels; do
                  trimmed=$(printf '%s' "$token" | xargs)
                  if [ -n "$trimmed" ]; then
                    if [ -n "$json_labels" ]; then
                      json_labels="$json_labels,\"$trimmed\""
                    else
                      json_labels="\"$trimmed\""
                    fi
                  fi
                done
                if [ -z "$json_labels" ]; then
                  json_labels="\"self-hosted\""
                fi
                echo "os-list=[[${json_labels}]]" >> "$GITHUB_OUTPUT"
                ;;
              github-ubuntu-latest)
                echo 'os-list=["ubuntu-latest"]' >> "$GITHUB_OUTPUT"
                ;;
              github-windows-latest)
                echo 'os-list=["windows-latest"]' >> "$GITHUB_OUTPUT"
                ;;
              github-macos-latest)
                echo 'os-list=["macos-latest"]' >> "$GITHUB_OUTPUT"
                ;;
              github-all|*)
                echo 'os-list=["ubuntu-latest","windows-latest","macos-latest"]' >> "$GITHUB_OUTPUT"
                ;;
            esac
          else
            echo 'os-list=["ubuntu-latest","windows-latest","macos-latest"]' >> "$GITHUB_OUTPUT"
          fi

  build:
    needs: set-matrix
    runs-on: ${{ matrix.os }}
    env:
      # Enable vcpkg's GitHub Actions cache provider for fast binary caching
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      VCPKG_FEATURE_FLAGS: manifests,binarycaching,registries
      # Ensure Ninja is used everywhere
      CMAKE_GENERATOR: Ninja
      VCPKG_USE_NINJA: 1
      IS_SELF_HOSTED: ${{ startsWith(github.event.inputs.target_runner || 'github-all', 'self-host-') }}

    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.set-matrix.outputs.os-list) }}
        build_type:
          - ${{ github.event.inputs.build_type || 'Release' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          fetch-tags: true

      - name: Clean build directory (self-hosted)
        if: env.IS_SELF_HOSTED == 'true' && github.event.inputs.clean_build == 'true'
        run: |
          echo "Removing existing build artifacts from self-hosted runner"
          rm -rf "${{ github.workspace }}/build"
          rm -f "${{ github.workspace }}/compile_commands.json"

      - name: Cache vcpkg downloads
        if: env.IS_SELF_HOSTED != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/external/vcpkg/downloads
          key: vcpkg-downloads-${{ runner.os }}-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}
          restore-keys: |
            vcpkg-downloads-${{ runner.os }}-

      # Prepare MSVC environment on Windows runners
      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows' && env.IS_SELF_HOSTED != 'true'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Ninja
        if: env.IS_SELF_HOSTED != 'true'
        uses: seanmiddleditch/gha-setup-ninja@v4

      # Extra guard: ensure Ninja is installed per-OS (fallback if action fails)
      - name: Ensure Ninja on macOS
        if: runner.os == 'macOS' && env.IS_SELF_HOSTED != 'true'
        run: |
          brew update
          # Install Ninja and required autotools for libsodium
          brew install ninja autoconf automake libtool pkg-config libomp

      - name: Ensure Ninja on Ubuntu
        if: runner.os == 'Linux' && env.IS_SELF_HOSTED != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libomp-dev

      - name: Ensure Ninja on Windows
        if: runner.os == 'Windows' && env.IS_SELF_HOSTED != 'true'
        run: choco install ninja --no-progress -y

      # Use vcpkg manifest mode via the repository submodule on all platforms
      - name: Setup sccache
        if: env.IS_SELF_HOSTED != 'true'
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Configure CMake (Unix)
        if: runner.os != 'Windows'
        run: >
          cmake -G "Ninja" -B "${{ github.workspace }}/build"
          -S "${{ github.workspace }}"
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || matrix.build_type }}
          -DCMAKE_C_COMPILER_LAUNCHER=sccache
          -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/external/vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: >
          cmake -G "Ninja" -B "${{ github.workspace }}/build"
          -S "${{ github.workspace }}"
          -DCMAKE_C_COMPILER=cl.exe
          -DCMAKE_CXX_COMPILER=cl.exe
          -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || matrix.build_type }}
          -DCMAKE_C_COMPILER_LAUNCHER=sccache
          -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/external/vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Build
        run: cmake --build "${{ github.workspace }}/build" --config ${{ matrix.build_type }}

      - name: Test
        if: github.event.inputs.skip_tests != 'true'
        working-directory: ${{ github.workspace }}/build
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Install build outputs
        if: github.event.inputs.upload_artifacts == 'true'
        run: >
          cmake --install "${{ github.workspace }}/build"
          --config ${{ matrix.build_type }}
          --prefix "${{ github.workspace }}/install"

      - name: Package installer payload (Unix)
        if: github.event.inputs.upload_artifacts == 'true' && runner.os != 'Windows'
        run: |
          set -euo pipefail
          INSTALL_DIR="${{ github.workspace }}/install"
          BUILD_DIR="${{ github.workspace }}/build"
          PAYLOAD_DIR="${{ github.workspace }}/package"
          rm -rf "$PAYLOAD_DIR"
          mkdir -p "$PAYLOAD_DIR"
          if [ -d "$INSTALL_DIR" ] && [ -n "$(find "$INSTALL_DIR" -mindepth 1 -maxdepth 1 -type d -name bin -o -name lib)" ]; then
            for sub in bin lib; do
              if [ -d "$INSTALL_DIR/$sub" ]; then
                mkdir -p "$PAYLOAD_DIR/$sub"
                cp -a "$INSTALL_DIR/$sub"/. "$PAYLOAD_DIR/$sub"/
              fi
            done
          else
            echo "Install directory missing bin/lib; falling back to build outputs" >&2
            mkdir -p "$PAYLOAD_DIR"
            rsync -a --prune-empty-dirs --include='*/' --include='*.so*' --include='*.dylib' --include='*.a' --include='*.dll' --include='*.exe' --include='*/bin/**' --include='*/lib/**' --exclude='*' "$BUILD_DIR"/ "$PAYLOAD_DIR"/ || true
          fi
          DEST_DIR="${{ github.workspace }}/dist"
          mkdir -p "$DEST_DIR"
          ARCHIVE_NAME="cert-ctrl-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz"
          tar -C "$PAYLOAD_DIR" -czf "$DEST_DIR/$ARCHIVE_NAME" .

      - name: Package installer payload (Windows)
        if: github.event.inputs.upload_artifacts == 'true' && runner.os == 'Windows'
        shell: pwsh
        run: |
          $install = Join-Path $env:GITHUB_WORKSPACE 'install'
          $build   = Join-Path $env:GITHUB_WORKSPACE 'build'
          $payload = Join-Path $env:GITHUB_WORKSPACE 'package'
          if (Test-Path $payload) { Remove-Item $payload -Recurse -Force }
          New-Item -Path $payload -ItemType Directory -Force | Out-Null
          $copied = $false
          foreach ($sub in @('bin','lib')) {
            $src = Join-Path $install $sub
            if (Test-Path $src) {
              robocopy $src (Join-Path $payload $sub) /E /NFL /NDL /NP /NJH /NJS | Out-Null
              if ($LASTEXITCODE -gt 3) { exit $LASTEXITCODE }
              $copied = $true
            }
          }
          if (-not $copied) {
            Write-Warning 'Install directory missing bin/lib; falling back to build outputs'
            robocopy $build $payload *.exe *.dll /S /XF *.pdb /XD obj tmp CMakeFiles /R:1 /W:1 | Out-Null
            if ($LASTEXITCODE -gt 3) { exit $LASTEXITCODE }
          }
          $dest = Join-Path $env:GITHUB_WORKSPACE 'dist'
          New-Item -Path $dest -ItemType Directory -Force | Out-Null
          $archive = "cert-ctrl-${{ matrix.os }}-${{ matrix.build_type }}.zip"
          $archivePath = Join-Path $dest $archive
          if (Test-Path $archivePath) { Remove-Item $archivePath }
          Compress-Archive -Path (Join-Path $payload '*') -DestinationPath $archivePath

      - name: Upload installer artifact (Unix)
        if: github.event.inputs.upload_artifacts == 'true' && runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.os }}-${{ matrix.build_type }}
          path: ${{ github.workspace }}/dist/cert-ctrl-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz
          if-no-files-found: error

      - name: Upload installer artifact (Windows)
        if: github.event.inputs.upload_artifacts == 'true' && runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.os }}-${{ matrix.build_type }}
          path: ${{ github.workspace }}\dist\cert-ctrl-${{ matrix.os }}-${{ matrix.build_type }}.zip
          if-no-files-found: error

      - name: Upload vcpkg logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: vcpkg-logs-${{ runner.os }}
          path: |
            ${{ github.workspace }}/build/vcpkg-manifest-install.log
            ${{ github.workspace }}/build/vcpkg_installed/*/buildtrees/**/*.log
            ${{ github.workspace }}/build/vcpkg_installed/*/buildtrees/**/*.txt
          if-no-files-found: ignore
